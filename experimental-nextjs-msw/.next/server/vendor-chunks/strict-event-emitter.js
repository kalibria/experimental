"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/strict-event-emitter";
exports.ids = ["vendor-chunks/strict-event-emitter"];
exports.modules = {

/***/ "(rsc)/./node_modules/strict-event-emitter/lib/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/strict-event-emitter/lib/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emitter: () => (/* binding */ Emitter),\n/* harmony export */   MemoryLeakError: () => (/* binding */ MemoryLeakError)\n/* harmony export */ });\n// src/MemoryLeakError.ts\nvar MemoryLeakError = class extends Error {\n    constructor(emitter, type, count){\n        super(`Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);\n        this.emitter = emitter;\n        this.type = type;\n        this.count = count;\n        this.name = \"MaxListenersExceededWarning\";\n    }\n};\n// src/Emitter.ts\nvar _Emitter = class {\n    static listenerCount(emitter, eventName) {\n        return emitter.listenerCount(eventName);\n    }\n    constructor(){\n        this.events = /* @__PURE__ */ new Map();\n        this.maxListeners = _Emitter.defaultMaxListeners;\n        this.hasWarnedAboutPotentialMemoryLeak = false;\n    }\n    _emitInternalEvent(internalEventName, eventName, listener) {\n        this.emit(internalEventName, ...[\n            eventName,\n            listener\n        ]);\n    }\n    _getListeners(eventName) {\n        return Array.prototype.concat.apply([], this.events.get(eventName)) || [];\n    }\n    _removeListener(listeners, listener) {\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n        return [];\n    }\n    _wrapOnceListener(eventName, listener) {\n        const onceListener = (...data)=>{\n            this.removeListener(eventName, onceListener);\n            return listener.apply(this, data);\n        };\n        Object.defineProperty(onceListener, \"name\", {\n            value: listener.name\n        });\n        return onceListener;\n    }\n    setMaxListeners(maxListeners) {\n        this.maxListeners = maxListeners;\n        return this;\n    }\n    /**\n   * Returns the current max listener value for the `Emitter` which is\n   * either set by `emitter.setMaxListeners(n)` or defaults to\n   * `Emitter.defaultMaxListeners`.\n   */ getMaxListeners() {\n        return this.maxListeners;\n    }\n    /**\n   * Returns an array listing the events for which the emitter has registered listeners.\n   * The values in the array will be strings or Symbols.\n   */ eventNames() {\n        return Array.from(this.events.keys());\n    }\n    /**\n   * Synchronously calls each of the listeners registered for the event named `eventName`,\n   * in the order they were registered, passing the supplied arguments to each.\n   * Returns `true` if the event has listeners, `false` otherwise.\n   *\n   * @example\n   * const emitter = new Emitter<{ hello: [string] }>()\n   * emitter.emit('hello', 'John')\n   */ emit(eventName, ...data) {\n        const listeners = this._getListeners(eventName);\n        listeners.forEach((listener)=>{\n            listener.apply(this, data);\n        });\n        return listeners.length > 0;\n    }\n    addListener(eventName, listener) {\n        this._emitInternalEvent(\"newListener\", eventName, listener);\n        const nextListeners = this._getListeners(eventName).concat(listener);\n        this.events.set(eventName, nextListeners);\n        if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {\n            this.hasWarnedAboutPotentialMemoryLeak = true;\n            const memoryLeakWarning = new MemoryLeakError(this, eventName, this.listenerCount(eventName));\n            console.warn(memoryLeakWarning);\n        }\n        return this;\n    }\n    on(eventName, listener) {\n        return this.addListener(eventName, listener);\n    }\n    once(eventName, listener) {\n        return this.addListener(eventName, this._wrapOnceListener(eventName, listener));\n    }\n    prependListener(eventName, listener) {\n        const listeners = this._getListeners(eventName);\n        if (listeners.length > 0) {\n            const nextListeners = [\n                listener\n            ].concat(listeners);\n            this.events.set(eventName, nextListeners);\n        } else {\n            this.events.set(eventName, listeners.concat(listener));\n        }\n        return this;\n    }\n    prependOnceListener(eventName, listener) {\n        return this.prependListener(eventName, this._wrapOnceListener(eventName, listener));\n    }\n    removeListener(eventName, listener) {\n        const listeners = this._getListeners(eventName);\n        if (listeners.length > 0) {\n            this._removeListener(listeners, listener);\n            this.events.set(eventName, listeners);\n            this._emitInternalEvent(\"removeListener\", eventName, listener);\n        }\n        return this;\n    }\n    /**\n   * Alias for `emitter.removeListener()`.\n   *\n   * @example\n   * emitter.off('hello', listener)\n   */ off(eventName, listener) {\n        return this.removeListener(eventName, listener);\n    }\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this.events.delete(eventName);\n        } else {\n            this.events.clear();\n        }\n        return this;\n    }\n    /**\n   * Returns a copy of the array of listeners for the event named `eventName`.\n   */ listeners(eventName) {\n        return Array.from(this._getListeners(eventName));\n    }\n    /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   */ listenerCount(eventName) {\n        return this._getListeners(eventName).length;\n    }\n    rawListeners(eventName) {\n        return this.listeners(eventName);\n    }\n};\nvar Emitter = _Emitter;\nEmitter.defaultMaxListeners = 10;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/strict-event-emitter/lib/index.mjs\n");

/***/ })

};
;