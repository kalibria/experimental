"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mswjs";
exports.ids = ["vendor-chunks/@mswjs"];
exports.modules = {

/***/ "(rsc)/./node_modules/@mswjs/cookies/lib/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@mswjs/cookies/lib/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERSISTENCY_KEY: () => (/* binding */ PERSISTENCY_KEY),\n/* harmony export */   store: () => (/* binding */ store)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n    \"node_modules/set-cookie-parser/lib/set-cookie.js\" (exports, module) {\n        \"use strict\";\n        var defaultParseOptions = {\n            decodeValues: true,\n            map: false,\n            silent: false\n        };\n        function isNonEmptyString(str) {\n            return typeof str === \"string\" && !!str.trim();\n        }\n        function parseString(setCookieValue, options) {\n            var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n            var nameValue = parts.shift().split(\"=\");\n            var name = nameValue.shift();\n            var value = nameValue.join(\"=\");\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            var cookie = {\n                name,\n                value: options.decodeValues ? decodeURIComponent(value) : value\n            };\n            parts.forEach(function(part) {\n                var sides = part.split(\"=\");\n                var key = sides.shift().trimLeft().toLowerCase();\n                var value2 = sides.join(\"=\");\n                if (key === \"expires\") {\n                    cookie.expires = new Date(value2);\n                } else if (key === \"max-age\") {\n                    cookie.maxAge = parseInt(value2, 10);\n                } else if (key === \"secure\") {\n                    cookie.secure = true;\n                } else if (key === \"httponly\") {\n                    cookie.httpOnly = true;\n                } else if (key === \"samesite\") {\n                    cookie.sameSite = value2;\n                } else {\n                    cookie[key] = value2;\n                }\n            });\n            return cookie;\n        }\n        function parse(input, options) {\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            if (!input) {\n                if (!options.map) {\n                    return [];\n                } else {\n                    return {};\n                }\n            }\n            if (input.headers && input.headers[\"set-cookie\"]) {\n                input = input.headers[\"set-cookie\"];\n            } else if (input.headers) {\n                var sch = input.headers[Object.keys(input.headers).find(function(key) {\n                    return key.toLowerCase() === \"set-cookie\";\n                })];\n                if (!sch && input.headers.cookie && !options.silent) {\n                    console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n                }\n                input = sch;\n            }\n            if (!Array.isArray(input)) {\n                input = [\n                    input\n                ];\n            }\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            if (!options.map) {\n                return input.filter(isNonEmptyString).map(function(str) {\n                    return parseString(str, options);\n                });\n            } else {\n                var cookies = {};\n                return input.filter(isNonEmptyString).reduce(function(cookies2, str) {\n                    var cookie = parseString(str, options);\n                    cookies2[cookie.name] = cookie;\n                    return cookies2;\n                }, cookies);\n            }\n        }\n        function splitCookiesString(cookiesString) {\n            if (Array.isArray(cookiesString)) {\n                return cookiesString;\n            }\n            if (typeof cookiesString !== \"string\") {\n                return [];\n            }\n            var cookiesStrings = [];\n            var pos = 0;\n            var start;\n            var ch;\n            var lastComma;\n            var nextStart;\n            var cookiesSeparatorFound;\n            function skipWhitespace() {\n                while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n                    pos += 1;\n                }\n                return pos < cookiesString.length;\n            }\n            function notSpecialChar() {\n                ch = cookiesString.charAt(pos);\n                return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n            }\n            while(pos < cookiesString.length){\n                start = pos;\n                cookiesSeparatorFound = false;\n                while(skipWhitespace()){\n                    ch = cookiesString.charAt(pos);\n                    if (ch === \",\") {\n                        lastComma = pos;\n                        pos += 1;\n                        skipWhitespace();\n                        nextStart = pos;\n                        while(pos < cookiesString.length && notSpecialChar()){\n                            pos += 1;\n                        }\n                        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                            cookiesSeparatorFound = true;\n                            pos = nextStart;\n                            cookiesStrings.push(cookiesString.substring(start, lastComma));\n                            start = pos;\n                        } else {\n                            pos = lastComma + 1;\n                        }\n                    } else {\n                        pos += 1;\n                    }\n                }\n                if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n                    cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n                }\n            }\n            return cookiesStrings;\n        }\n        module.exports = parse;\n        module.exports.parse = parse;\n        module.exports.parseString = parseString;\n        module.exports.splitCookiesString = splitCookiesString;\n    }\n});\n// src/store.ts\nvar import_set_cookie_parser = __toESM(require_set_cookie());\nvar PERSISTENCY_KEY = \"MSW_COOKIE_STORE\";\nfunction supportsLocalStorage() {\n    try {\n        if (localStorage == null) {\n            return false;\n        }\n        const testKey = PERSISTENCY_KEY + \"_test\";\n        localStorage.setItem(testKey, \"test\");\n        localStorage.getItem(testKey);\n        localStorage.removeItem(testKey);\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\nvar CookieStore = class {\n    constructor(){\n        this.store = /* @__PURE__ */ new Map();\n    }\n    add(request, response) {\n        if (request.credentials === \"omit\") {\n            return;\n        }\n        const requestUrl = new URL(request.url);\n        const responseCookies = response.headers.get(\"set-cookie\");\n        if (!responseCookies) {\n            return;\n        }\n        const now = Date.now();\n        const parsedResponseCookies = (0, import_set_cookie_parser.parse)(responseCookies).map(({ maxAge, ...cookie })=>({\n                ...cookie,\n                expires: maxAge === void 0 ? cookie.expires : new Date(now + maxAge * 1e3),\n                maxAge\n            }));\n        const prevCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();\n        parsedResponseCookies.forEach((cookie)=>{\n            this.store.set(requestUrl.origin, prevCookies.set(cookie.name, cookie));\n        });\n    }\n    get(request) {\n        this.deleteExpiredCookies();\n        const requestUrl = new URL(request.url);\n        const originCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();\n        switch(request.credentials){\n            case \"include\":\n                {\n                    if (typeof document === \"undefined\") {\n                        return originCookies;\n                    }\n                    const documentCookies = (0, import_set_cookie_parser.parse)(document.cookie);\n                    documentCookies.forEach((cookie)=>{\n                        originCookies.set(cookie.name, cookie);\n                    });\n                    return originCookies;\n                }\n            case \"same-origin\":\n                {\n                    return originCookies;\n                }\n            default:\n                return /* @__PURE__ */ new Map();\n        }\n    }\n    getAll() {\n        this.deleteExpiredCookies();\n        return this.store;\n    }\n    deleteAll(request) {\n        const requestUrl = new URL(request.url);\n        this.store.delete(requestUrl.origin);\n    }\n    clear() {\n        this.store.clear();\n    }\n    hydrate() {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        const persistedCookies = localStorage.getItem(PERSISTENCY_KEY);\n        if (!persistedCookies) {\n            return;\n        }\n        try {\n            const parsedCookies = JSON.parse(persistedCookies);\n            parsedCookies.forEach(([origin, cookies])=>{\n                this.store.set(origin, new Map(cookies.map(([token, { expires, ...cookie }])=>[\n                        token,\n                        expires === void 0 ? cookie : {\n                            ...cookie,\n                            expires: new Date(expires)\n                        }\n                    ])));\n            });\n        } catch (error) {\n            console.warn(`\n[virtual-cookie] Failed to parse a stored cookie from the localStorage (key \"${PERSISTENCY_KEY}\").\n\nStored value:\n${localStorage.getItem(PERSISTENCY_KEY)}\n\nThrown exception:\n${error}\n\nInvalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`);\n            localStorage.removeItem(PERSISTENCY_KEY);\n        }\n    }\n    persist() {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        const serializedCookies = Array.from(this.store.entries()).map(([origin, cookies])=>{\n            return [\n                origin,\n                Array.from(cookies.entries())\n            ];\n        });\n        localStorage.setItem(PERSISTENCY_KEY, JSON.stringify(serializedCookies));\n    }\n    deleteExpiredCookies() {\n        const now = Date.now();\n        this.store.forEach((originCookies, origin)=>{\n            originCookies.forEach(({ expires, name })=>{\n                if (expires !== void 0 && expires.getTime() <= now) {\n                    originCookies.delete(name);\n                }\n            });\n            if (originCookies.size === 0) {\n                this.store.delete(origin);\n            }\n        });\n    }\n};\nvar store = new CookieStore();\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2Nvb2tpZXMvbGliL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLFdBQVdDLE9BQU9DLE1BQU07QUFDNUIsSUFBSUMsWUFBWUYsT0FBT0csY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJKLE9BQU9LLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JOLE9BQU9PLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlUixPQUFPUyxjQUFjO0FBQ3hDLElBQUlDLGVBQWVWLE9BQU9XLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxhQUFhLENBQUNDLElBQUlDLE1BQVEsU0FBU0M7UUFDckMsT0FBT0QsT0FBTyxDQUFDLEdBQUdELEVBQUUsQ0FBQ1Isa0JBQWtCUSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQ0MsTUFBTTtZQUFFRSxTQUFTLENBQUM7UUFBRSxHQUFHQSxPQUFPLEVBQUVGLE1BQU1BLElBQUlFLE9BQU87SUFDcEc7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9qQixrQkFBa0JjLE1BQ2hDLElBQUksQ0FBQ1YsYUFBYWMsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q25CLFVBQVVpQixJQUFJSSxLQUFLO1lBQUVFLEtBQUssSUFBTUwsSUFBSSxDQUFDRyxJQUFJO1lBQUVHLFlBQVksQ0FBRUosQ0FBQUEsT0FBT2xCLGlCQUFpQmdCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0ksVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT1A7QUFDVDtBQUNBLElBQUlRLFVBQVUsQ0FBQ1osS0FBS2EsWUFBWUMsU0FBWUEsQ0FBQUEsU0FBU2QsT0FBTyxPQUFPaEIsU0FBU1MsYUFBYU8sUUFBUSxDQUFDLEdBQUdHLFlBQ25HVSxjQUFjLENBQUNi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Q0FBQy9FO2dCQUN2QjtZQUNGO1lBQ0EsSUFBSTBFLGNBQWNpQixJQUFJLEtBQUssR0FBRztnQkFDNUIsSUFBSSxDQUFDakMsS0FBSyxDQUFDcUIsTUFBTSxDQUFDUjtZQUNwQjtRQUNGO0lBQ0Y7QUFDRjtBQUNBLElBQUliLFFBQVEsSUFBSUY7QUFJZCxDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1tc3cvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2Nvb2tpZXMvbGliL2luZGV4Lm1qcz9iYzU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUoKSB7XG4gIHJldHVybiBtb2QgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKChtb2QgPSB7IGV4cG9ydHM6IHt9IH0pLmV4cG9ydHMsIG1vZCksIG1vZC5leHBvcnRzO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xuXG4vLyBub2RlX21vZHVsZXMvc2V0LWNvb2tpZS1wYXJzZXIvbGliL3NldC1jb29raWUuanNcbnZhciByZXF1aXJlX3NldF9jb29raWUgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvc2V0LWNvb2tpZS1wYXJzZXIvbGliL3NldC1jb29raWUuanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgZGVmYXVsdFBhcnNlT3B0aW9ucyA9IHtcbiAgICAgIGRlY29kZVZhbHVlczogdHJ1ZSxcbiAgICAgIG1hcDogZmFsc2UsXG4gICAgICBzaWxlbnQ6IGZhbHNlXG4gICAgfTtcbiAgICBmdW5jdGlvbiBpc05vbkVtcHR5U3RyaW5nKHN0cikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBzdHIgPT09IFwic3RyaW5nXCIgJiYgISFzdHIudHJpbSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZVN0cmluZyhzZXRDb29raWVWYWx1ZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHBhcnRzID0gc2V0Q29va2llVmFsdWUuc3BsaXQoXCI7XCIpLmZpbHRlcihpc05vbkVtcHR5U3RyaW5nKTtcbiAgICAgIHZhciBuYW1lVmFsdWUgPSBwYXJ0cy5zaGlmdCgpLnNwbGl0KFwiPVwiKTtcbiAgICAgIHZhciBuYW1lID0gbmFtZVZhbHVlLnNoaWZ0KCk7XG4gICAgICB2YXIgdmFsdWUgPSBuYW1lVmFsdWUuam9pbihcIj1cIik7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQYXJzZU9wdGlvbnMsIG9wdGlvbnMpIDogZGVmYXVsdFBhcnNlT3B0aW9ucztcbiAgICAgIHZhciBjb29raWUgPSB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLmRlY29kZVZhbHVlcyA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgOiB2YWx1ZVxuICAgICAgfTtcbiAgICAgIHBhcnRzLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xuICAgICAgICB2YXIgc2lkZXMgPSBwYXJ0LnNwbGl0KFwiPVwiKTtcbiAgICAgICAgdmFyIGtleSA9IHNpZGVzLnNoaWZ0KCkudHJpbUxlZnQoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgdmFsdWUyID0gc2lkZXMuam9pbihcIj1cIik7XG4gICAgICAgIGlmIChrZXkgPT09IFwiZXhwaXJlc1wiKSB7XG4gICAgICAgICAgY29va2llLmV4cGlyZXMgPSBuZXcgRGF0ZSh2YWx1ZTIpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJtYXgtYWdlXCIpIHtcbiAgICAgICAgICBjb29raWUubWF4QWdlID0gcGFyc2VJbnQodmFsdWUyLCAxMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInNlY3VyZVwiKSB7XG4gICAgICAgICAgY29va2llLnNlY3VyZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcImh0dHBvbmx5XCIpIHtcbiAgICAgICAgICBjb29raWUuaHR0cE9ubHkgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJzYW1lc2l0ZVwiKSB7XG4gICAgICAgICAgY29va2llLnNhbWVTaXRlID0gdmFsdWUyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvb2tpZVtrZXldID0gdmFsdWUyO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb29raWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQYXJzZU9wdGlvbnMsIG9wdGlvbnMpIDogZGVmYXVsdFBhcnNlT3B0aW9ucztcbiAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLm1hcCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dC5oZWFkZXJzICYmIGlucHV0LmhlYWRlcnNbXCJzZXQtY29va2llXCJdKSB7XG4gICAgICAgIGlucHV0ID0gaW5wdXQuaGVhZGVyc1tcInNldC1jb29raWVcIl07XG4gICAgICB9IGVsc2UgaWYgKGlucHV0LmhlYWRlcnMpIHtcbiAgICAgICAgdmFyIHNjaCA9IGlucHV0LmhlYWRlcnNbT2JqZWN0LmtleXMoaW5wdXQuaGVhZGVycykuZmluZChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKCkgPT09IFwic2V0LWNvb2tpZVwiO1xuICAgICAgICB9KV07XG4gICAgICAgIGlmICghc2NoICYmIGlucHV0LmhlYWRlcnMuY29va2llICYmICFvcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiV2FybmluZzogc2V0LWNvb2tpZS1wYXJzZXIgYXBwZWFycyB0byBoYXZlIGJlZW4gY2FsbGVkIG9uIGEgcmVxdWVzdCBvYmplY3QuIEl0IGlzIGRlc2lnbmVkIHRvIHBhcnNlIFNldC1Db29raWUgaGVhZGVycyBmcm9tIHJlc3BvbnNlcywgbm90IENvb2tpZSBoZWFkZXJzIGZyb20gcmVxdWVzdHMuIFNldCB0aGUgb3B0aW9uIHtzaWxlbnQ6IHRydWV9IHRvIHN1cHByZXNzIHRoaXMgd2FybmluZy5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBzY2g7XG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIGlucHV0ID0gW2lucHV0XTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFBhcnNlT3B0aW9ucywgb3B0aW9ucykgOiBkZWZhdWx0UGFyc2VPcHRpb25zO1xuICAgICAgaWYgKCFvcHRpb25zLm1hcCkge1xuICAgICAgICByZXR1cm4gaW5wdXQuZmlsdGVyKGlzTm9uRW1wdHlTdHJpbmcpLm1hcChmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmcoc3RyLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29va2llcyA9IHt9O1xuICAgICAgICByZXR1cm4gaW5wdXQuZmlsdGVyKGlzTm9uRW1wdHlTdHJpbmcpLnJlZHVjZShmdW5jdGlvbihjb29raWVzMiwgc3RyKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IHBhcnNlU3RyaW5nKHN0ciwgb3B0aW9ucyk7XG4gICAgICAgICAgY29va2llczJbY29va2llLm5hbWVdID0gY29va2llO1xuICAgICAgICAgIHJldHVybiBjb29raWVzMjtcbiAgICAgICAgfSwgY29va2llcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwbGl0Q29va2llc1N0cmluZyhjb29raWVzU3RyaW5nKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb29raWVzU3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gY29va2llc1N0cmluZztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY29va2llc1N0cmluZyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgY29va2llc1N0cmluZ3MgPSBbXTtcbiAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgdmFyIHN0YXJ0O1xuICAgICAgdmFyIGNoO1xuICAgICAgdmFyIGxhc3RDb21tYTtcbiAgICAgIHZhciBuZXh0U3RhcnQ7XG4gICAgICB2YXIgY29va2llc1NlcGFyYXRvckZvdW5kO1xuICAgICAgZnVuY3Rpb24gc2tpcFdoaXRlc3BhY2UoKSB7XG4gICAgICAgIHdoaWxlIChwb3MgPCBjb29raWVzU3RyaW5nLmxlbmd0aCAmJiAvXFxzLy50ZXN0KGNvb2tpZXNTdHJpbmcuY2hhckF0KHBvcykpKSB7XG4gICAgICAgICAgcG9zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvcyA8IGNvb2tpZXNTdHJpbmcubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbm90U3BlY2lhbENoYXIoKSB7XG4gICAgICAgIGNoID0gY29va2llc1N0cmluZy5jaGFyQXQocG9zKTtcbiAgICAgICAgcmV0dXJuIGNoICE9PSBcIj1cIiAmJiBjaCAhPT0gXCI7XCIgJiYgY2ggIT09IFwiLFwiO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBvcyA8IGNvb2tpZXNTdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIHN0YXJ0ID0gcG9zO1xuICAgICAgICBjb29raWVzU2VwYXJhdG9yRm91bmQgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKHNraXBXaGl0ZXNwYWNlKCkpIHtcbiAgICAgICAgICBjaCA9IGNvb2tpZXNTdHJpbmcuY2hhckF0KHBvcyk7XG4gICAgICAgICAgaWYgKGNoID09PSBcIixcIikge1xuICAgICAgICAgICAgbGFzdENvbW1hID0gcG9zO1xuICAgICAgICAgICAgcG9zICs9IDE7XG4gICAgICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgbmV4dFN0YXJ0ID0gcG9zO1xuICAgICAgICAgICAgd2hpbGUgKHBvcyA8IGNvb2tpZXNTdHJpbmcubGVuZ3RoICYmIG5vdFNwZWNpYWxDaGFyKCkpIHtcbiAgICAgICAgICAgICAgcG9zICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zIDwgY29va2llc1N0cmluZy5sZW5ndGggJiYgY29va2llc1N0cmluZy5jaGFyQXQocG9zKSA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgY29va2llc1NlcGFyYXRvckZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcG9zID0gbmV4dFN0YXJ0O1xuICAgICAgICAgICAgICBjb29raWVzU3RyaW5ncy5wdXNoKGNvb2tpZXNTdHJpbmcuc3Vic3RyaW5nKHN0YXJ0LCBsYXN0Q29tbWEpKTtcbiAgICAgICAgICAgICAgc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwb3MgPSBsYXN0Q29tbWEgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3MgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb29raWVzU2VwYXJhdG9yRm91bmQgfHwgcG9zID49IGNvb2tpZXNTdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgY29va2llc1N0cmluZ3MucHVzaChjb29raWVzU3RyaW5nLnN1YnN0cmluZyhzdGFydCwgY29va2llc1N0cmluZy5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvb2tpZXNTdHJpbmdzO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuICAgIG1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG4gICAgbW9kdWxlLmV4cG9ydHMucGFyc2VTdHJpbmcgPSBwYXJzZVN0cmluZztcbiAgICBtb2R1bGUuZXhwb3J0cy5zcGxpdENvb2tpZXNTdHJpbmcgPSBzcGxpdENvb2tpZXNTdHJpbmc7XG4gIH1cbn0pO1xuXG4vLyBzcmMvc3RvcmUudHNcbnZhciBpbXBvcnRfc2V0X2Nvb2tpZV9wYXJzZXIgPSBfX3RvRVNNKHJlcXVpcmVfc2V0X2Nvb2tpZSgpKTtcbnZhciBQRVJTSVNURU5DWV9LRVkgPSBcIk1TV19DT09LSUVfU1RPUkVcIjtcbmZ1bmN0aW9uIHN1cHBvcnRzTG9jYWxTdG9yYWdlKCkge1xuICB0cnkge1xuICAgIGlmIChsb2NhbFN0b3JhZ2UgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0ZXN0S2V5ID0gUEVSU0lTVEVOQ1lfS0VZICsgXCJfdGVzdFwiO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRlc3RLZXksIFwidGVzdFwiKTtcbiAgICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0ZXN0S2V5KTtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0S2V5KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbnZhciBDb29raWVTdG9yZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdG9yZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIH1cbiAgYWRkKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09IFwib21pdFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBjb25zdCByZXNwb25zZUNvb2tpZXMgPSByZXNwb25zZS5oZWFkZXJzLmdldChcInNldC1jb29raWVcIik7XG4gICAgaWYgKCFyZXNwb25zZUNvb2tpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBwYXJzZWRSZXNwb25zZUNvb2tpZXMgPSAoMCwgaW1wb3J0X3NldF9jb29raWVfcGFyc2VyLnBhcnNlKShyZXNwb25zZUNvb2tpZXMpLm1hcChcbiAgICAgICh7IG1heEFnZSwgLi4uY29va2llIH0pID0+ICh7XG4gICAgICAgIC4uLmNvb2tpZSxcbiAgICAgICAgZXhwaXJlczogbWF4QWdlID09PSB2b2lkIDAgPyBjb29raWUuZXhwaXJlcyA6IG5ldyBEYXRlKG5vdyArIG1heEFnZSAqIDFlMyksXG4gICAgICAgIG1heEFnZVxuICAgICAgfSlcbiAgICApO1xuICAgIGNvbnN0IHByZXZDb29raWVzID0gdGhpcy5zdG9yZS5nZXQocmVxdWVzdFVybC5vcmlnaW4pIHx8IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgcGFyc2VkUmVzcG9uc2VDb29raWVzLmZvckVhY2goKGNvb2tpZSkgPT4ge1xuICAgICAgdGhpcy5zdG9yZS5zZXQocmVxdWVzdFVybC5vcmlnaW4sIHByZXZDb29raWVzLnNldChjb29raWUubmFtZSwgY29va2llKSk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0KHJlcXVlc3QpIHtcbiAgICB0aGlzLmRlbGV0ZUV4cGlyZWRDb29raWVzKCk7XG4gICAgY29uc3QgcmVxdWVzdFVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGNvbnN0IG9yaWdpbkNvb2tpZXMgPSB0aGlzLnN0b3JlLmdldChyZXF1ZXN0VXJsLm9yaWdpbikgfHwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBzd2l0Y2ggKHJlcXVlc3QuY3JlZGVudGlhbHMpIHtcbiAgICAgIGNhc2UgXCJpbmNsdWRlXCI6IHtcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5Db29raWVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRvY3VtZW50Q29va2llcyA9ICgwLCBpbXBvcnRfc2V0X2Nvb2tpZV9wYXJzZXIucGFyc2UpKGRvY3VtZW50LmNvb2tpZSk7XG4gICAgICAgIGRvY3VtZW50Q29va2llcy5mb3JFYWNoKChjb29raWUpID0+IHtcbiAgICAgICAgICBvcmlnaW5Db29raWVzLnNldChjb29raWUubmFtZSwgY29va2llKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvcmlnaW5Db29raWVzO1xuICAgICAgfVxuICAgICAgY2FzZSBcInNhbWUtb3JpZ2luXCI6IHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbkNvb2tpZXM7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB9XG4gIH1cbiAgZ2V0QWxsKCkge1xuICAgIHRoaXMuZGVsZXRlRXhwaXJlZENvb2tpZXMoKTtcbiAgICByZXR1cm4gdGhpcy5zdG9yZTtcbiAgfVxuICBkZWxldGVBbGwocmVxdWVzdCkge1xuICAgIGNvbnN0IHJlcXVlc3RVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICB0aGlzLnN0b3JlLmRlbGV0ZShyZXF1ZXN0VXJsLm9yaWdpbik7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zdG9yZS5jbGVhcigpO1xuICB9XG4gIGh5ZHJhdGUoKSB7XG4gICAgaWYgKCFzdXBwb3J0c0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBlcnNpc3RlZENvb2tpZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShQRVJTSVNURU5DWV9LRVkpO1xuICAgIGlmICghcGVyc2lzdGVkQ29va2llcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyc2VkQ29va2llcyA9IEpTT04ucGFyc2UocGVyc2lzdGVkQ29va2llcyk7XG4gICAgICBwYXJzZWRDb29raWVzLmZvckVhY2goKFtvcmlnaW4sIGNvb2tpZXNdKSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0KFxuICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICBuZXcgTWFwKFxuICAgICAgICAgICAgY29va2llcy5tYXAoKFt0b2tlbiwgeyBleHBpcmVzLCAuLi5jb29raWUgfV0pID0+IFtcbiAgICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICAgIGV4cGlyZXMgPT09IHZvaWQgMCA/IGNvb2tpZSA6IHsgLi4uY29va2llLCBleHBpcmVzOiBuZXcgRGF0ZShleHBpcmVzKSB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFxuW3ZpcnR1YWwtY29va2llXSBGYWlsZWQgdG8gcGFyc2UgYSBzdG9yZWQgY29va2llIGZyb20gdGhlIGxvY2FsU3RvcmFnZSAoa2V5IFwiJHtQRVJTSVNURU5DWV9LRVl9XCIpLlxuXG5TdG9yZWQgdmFsdWU6XG4ke2xvY2FsU3RvcmFnZS5nZXRJdGVtKFBFUlNJU1RFTkNZX0tFWSl9XG5cblRocm93biBleGNlcHRpb246XG4ke2Vycm9yfVxuXG5JbnZhbGlkIHZhbHVlIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBsb2NhbFN0b3JhZ2UgdG8gcHJldmVudCBzdWJzZXF1ZW50IGZhaWxlZCBwYXJzaW5nIGF0dGVtcHRzLmApO1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oUEVSU0lTVEVOQ1lfS0VZKTtcbiAgICB9XG4gIH1cbiAgcGVyc2lzdCgpIHtcbiAgICBpZiAoIXN1cHBvcnRzTG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VyaWFsaXplZENvb2tpZXMgPSBBcnJheS5mcm9tKHRoaXMuc3RvcmUuZW50cmllcygpKS5tYXAoXG4gICAgICAoW29yaWdpbiwgY29va2llc10pID0+IHtcbiAgICAgICAgcmV0dXJuIFtvcmlnaW4sIEFycmF5LmZyb20oY29va2llcy5lbnRyaWVzKCkpXTtcbiAgICAgIH1cbiAgICApO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFBFUlNJU1RFTkNZX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplZENvb2tpZXMpKTtcbiAgfVxuICBkZWxldGVFeHBpcmVkQ29va2llcygpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuc3RvcmUuZm9yRWFjaCgob3JpZ2luQ29va2llcywgb3JpZ2luKSA9PiB7XG4gICAgICBvcmlnaW5Db29raWVzLmZvckVhY2goKHsgZXhwaXJlcywgbmFtZSB9KSA9PiB7XG4gICAgICAgIGlmIChleHBpcmVzICE9PSB2b2lkIDAgJiYgZXhwaXJlcy5nZXRUaW1lKCkgPD0gbm93KSB7XG4gICAgICAgICAgb3JpZ2luQ29va2llcy5kZWxldGUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKG9yaWdpbkNvb2tpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLnN0b3JlLmRlbGV0ZShvcmlnaW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xudmFyIHN0b3JlID0gbmV3IENvb2tpZVN0b3JlKCk7XG5leHBvcnQge1xuICBQRVJTSVNURU5DWV9LRVksXG4gIHN0b3JlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2NvbW1vbkpTIiwiY2IiLCJtb2QiLCJfX3JlcXVpcmUiLCJleHBvcnRzIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsImdldCIsImVudW1lcmFibGUiLCJfX3RvRVNNIiwiaXNOb2RlTW9kZSIsInRhcmdldCIsIl9fZXNNb2R1bGUiLCJ2YWx1ZSIsInJlcXVpcmVfc2V0X2Nvb2tpZSIsIm1vZHVsZSIsImRlZmF1bHRQYXJzZU9wdGlvbnMiLCJkZWNvZGVWYWx1ZXMiLCJtYXAiLCJzaWxlbnQiLCJpc05vbkVtcHR5U3RyaW5nIiwic3RyIiwidHJpbSIsInBhcnNlU3RyaW5nIiwic2V0Q29va2llVmFsdWUiLCJvcHRpb25zIiwicGFydHMiLCJzcGxpdCIsImZpbHRlciIsIm5hbWVWYWx1ZSIsInNoaWZ0IiwibmFtZSIsImpvaW4iLCJhc3NpZ24iLCJjb29raWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJmb3JFYWNoIiwicGFydCIsInNpZGVzIiwidHJpbUxlZnQiLCJ0b0xvd2VyQ2FzZSIsInZhbHVlMiIsImV4cGlyZXMiLCJEYXRlIiwibWF4QWdlIiwicGFyc2VJbnQiLCJzZWN1cmUiLCJodHRwT25seSIsInNhbWVTaXRlIiwicGFyc2UiLCJpbnB1dCIsImhlYWRlcnMiLCJzY2giLCJrZXlzIiwiZmluZCIsImNvbnNvbGUiLCJ3YXJuIiwiQXJyYXkiLCJpc0FycmF5IiwiY29va2llcyIsInJlZHVjZSIsImNvb2tpZXMyIiwic3BsaXRDb29raWVzU3RyaW5nIiwiY29va2llc1N0cmluZyIsImNvb2tpZXNTdHJpbmdzIiwicG9zIiwic3RhcnQiLCJjaCIsImxhc3RDb21tYSIsIm5leHRTdGFydCIsImNvb2tpZXNTZXBhcmF0b3JGb3VuZCIsInNraXBXaGl0ZXNwYWNlIiwibGVuZ3RoIiwidGVzdCIsImNoYXJBdCIsIm5vdFNwZWNpYWxDaGFyIiwicHVzaCIsInN1YnN0cmluZyIsImltcG9ydF9zZXRfY29va2llX3BhcnNlciIsIlBFUlNJU1RFTkNZX0tFWSIsInN1cHBvcnRzTG9jYWxTdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwidGVzdEtleSIsInNldEl0ZW0iLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsImVycm9yIiwiQ29va2llU3RvcmUiLCJjb25zdHJ1Y3RvciIsInN0b3JlIiwiTWFwIiwiYWRkIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiY3JlZGVudGlhbHMiLCJyZXF1ZXN0VXJsIiwiVVJMIiwidXJsIiwicmVzcG9uc2VDb29raWVzIiwibm93IiwicGFyc2VkUmVzcG9uc2VDb29raWVzIiwicHJldkNvb2tpZXMiLCJvcmlnaW4iLCJzZXQiLCJkZWxldGVFeHBpcmVkQ29va2llcyIsIm9yaWdpbkNvb2tpZXMiLCJkb2N1bWVudCIsImRvY3VtZW50Q29va2llcyIsImdldEFsbCIsImRlbGV0ZUFsbCIsImRlbGV0ZSIsImNsZWFyIiwiaHlkcmF0ZSIsInBlcnNpc3RlZENvb2tpZXMiLCJwYXJzZWRDb29raWVzIiwiSlNPTiIsInRva2VuIiwicGVyc2lzdCIsInNlcmlhbGl6ZWRDb29raWVzIiwiZW50cmllcyIsInN0cmluZ2lmeSIsImdldFRpbWUiLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/cookies/lib/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-3IYIKC3X.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-3IYIKC3X.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   responseStatusCodesWithoutBody: () => (/* binding */ responseStatusCodesWithoutBody)\n/* harmony export */ });\n// src/utils/responseUtils.ts\nvar responseStatusCodesWithoutBody = [\n    204,\n    205,\n    304\n];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay0zSVlJS0MzWC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZCQUE2QjtBQUM3QixJQUFJQSxpQ0FBaUM7SUFBQztJQUFLO0lBQUs7Q0FBSTtBQUlsRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1tc3cvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay0zSVlJS0MzWC5tanM/OGFkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvcmVzcG9uc2VVdGlscy50c1xudmFyIHJlc3BvbnNlU3RhdHVzQ29kZXNXaXRob3V0Qm9keSA9IFsyMDQsIDIwNSwgMzA0XTtcblxuZXhwb3J0IHtcbiAgcmVzcG9uc2VTdGF0dXNDb2Rlc1dpdGhvdXRCb2R5XG59O1xuIl0sIm5hbWVzIjpbInJlc3BvbnNlU3RhdHVzQ29kZXNXaXRob3V0Qm9keSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-3IYIKC3X.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-7II4SWKS.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-7II4SWKS.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBuffer: () => (/* binding */ decodeBuffer),\n/* harmony export */   encodeBuffer: () => (/* binding */ encodeBuffer),\n/* harmony export */   toArrayBuffer: () => (/* binding */ toArrayBuffer)\n/* harmony export */ });\n// src/utils/bufferUtils.ts\nvar encoder = new TextEncoder();\nfunction encodeBuffer(text) {\n    return encoder.encode(text);\n}\nfunction decodeBuffer(buffer, encoding) {\n    const decoder = new TextDecoder(encoding);\n    return decoder.decode(buffer);\n}\nfunction toArrayBuffer(array) {\n    return array.buffer.slice(array.byteOffset, array.byteOffset + array.byteLength);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay03SUk0U1dLUy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkJBQTJCO0FBQzNCLElBQUlBLFVBQVUsSUFBSUM7QUFDbEIsU0FBU0MsYUFBYUMsSUFBSTtJQUN4QixPQUFPSCxRQUFRSSxNQUFNLENBQUNEO0FBQ3hCO0FBQ0EsU0FBU0UsYUFBYUMsTUFBTSxFQUFFQyxRQUFRO0lBQ3BDLE1BQU1DLFVBQVUsSUFBSUMsWUFBWUY7SUFDaEMsT0FBT0MsUUFBUUUsTUFBTSxDQUFDSjtBQUN4QjtBQUNBLFNBQVNLLGNBQWNDLEtBQUs7SUFDMUIsT0FBT0EsTUFBTU4sTUFBTSxDQUFDTyxLQUFLLENBQ3ZCRCxNQUFNRSxVQUFVLEVBQ2hCRixNQUFNRSxVQUFVLEdBQUdGLE1BQU1HLFVBQVU7QUFFdkM7QUFNRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1tc3cvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay03SUk0U1dLUy5tanM/NDg1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvYnVmZmVyVXRpbHMudHNcbnZhciBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5mdW5jdGlvbiBlbmNvZGVCdWZmZXIodGV4dCkge1xuICByZXR1cm4gZW5jb2Rlci5lbmNvZGUodGV4dCk7XG59XG5mdW5jdGlvbiBkZWNvZGVCdWZmZXIoYnVmZmVyLCBlbmNvZGluZykge1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKTtcbiAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG59XG5mdW5jdGlvbiB0b0FycmF5QnVmZmVyKGFycmF5KSB7XG4gIHJldHVybiBhcnJheS5idWZmZXIuc2xpY2UoXG4gICAgYXJyYXkuYnl0ZU9mZnNldCxcbiAgICBhcnJheS5ieXRlT2Zmc2V0ICsgYXJyYXkuYnl0ZUxlbmd0aFxuICApO1xufVxuXG5leHBvcnQge1xuICBlbmNvZGVCdWZmZXIsXG4gIGRlY29kZUJ1ZmZlcixcbiAgdG9BcnJheUJ1ZmZlclxufTtcbiJdLCJuYW1lcyI6WyJlbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGVCdWZmZXIiLCJ0ZXh0IiwiZW5jb2RlIiwiZGVjb2RlQnVmZmVyIiwiYnVmZmVyIiwiZW5jb2RpbmciLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJ0b0FycmF5QnVmZmVyIiwiYXJyYXkiLCJzbGljZSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-7II4SWKS.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-FB53TMYN.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-FB53TMYN.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLHttpRequestInterceptor: () => (/* binding */ XMLHttpRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-7II4SWKS.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-7II4SWKS.mjs\");\n/* harmony import */ var _chunk_3IYIKC3X_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-3IYIKC3X.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-3IYIKC3X.mjs\");\n/* harmony import */ var _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-GFH37L5D.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GFH37L5D.mjs\");\n/* harmony import */ var _chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-YQGTMMOZ.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs\");\n/* harmony import */ var _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-GM3YBSM3.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @open-draft/until */ \"(rsc)/./node_modules/@open-draft/until/lib/index.mjs\");\n/* harmony import */ var is_node_process__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! is-node-process */ \"(rsc)/./node_modules/is-node-process/lib/index.mjs\");\n\n\n\n\n\n// src/interceptors/XMLHttpRequest/index.ts\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\n\n\n// src/interceptors/XMLHttpRequest/utils/concatArrayBuffer.ts\nfunction concatArrayBuffer(left, right) {\n    const result = new Uint8Array(left.byteLength + right.byteLength);\n    result.set(left, 0);\n    result.set(right, left.byteLength);\n    return result;\n}\n// src/interceptors/XMLHttpRequest/polyfills/EventPolyfill.ts\nvar EventPolyfill = class {\n    constructor(type, options){\n        this.AT_TARGET = 0;\n        this.BUBBLING_PHASE = 0;\n        this.CAPTURING_PHASE = 0;\n        this.NONE = 0;\n        this.type = \"\";\n        this.srcElement = null;\n        this.currentTarget = null;\n        this.eventPhase = 0;\n        this.isTrusted = true;\n        this.composed = false;\n        this.cancelable = true;\n        this.defaultPrevented = false;\n        this.bubbles = true;\n        this.lengthComputable = true;\n        this.loaded = 0;\n        this.total = 0;\n        this.cancelBubble = false;\n        this.returnValue = true;\n        this.type = type;\n        this.target = (options == null ? void 0 : options.target) || null;\n        this.currentTarget = (options == null ? void 0 : options.currentTarget) || null;\n        this.timeStamp = Date.now();\n    }\n    composedPath() {\n        return [];\n    }\n    initEvent(type, bubbles, cancelable) {\n        this.type = type;\n        this.bubbles = !!bubbles;\n        this.cancelable = !!cancelable;\n    }\n    preventDefault() {\n        this.defaultPrevented = true;\n    }\n    stopPropagation() {}\n    stopImmediatePropagation() {}\n};\n// src/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.ts\nvar ProgressEventPolyfill = class extends EventPolyfill {\n    constructor(type, init){\n        super(type);\n        this.lengthComputable = (init == null ? void 0 : init.lengthComputable) || false;\n        this.composed = (init == null ? void 0 : init.composed) || false;\n        this.loaded = (init == null ? void 0 : init.loaded) || 0;\n        this.total = (init == null ? void 0 : init.total) || 0;\n    }\n};\n// src/interceptors/XMLHttpRequest/utils/createEvent.ts\nvar SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== \"undefined\";\nfunction createEvent(target, type, init) {\n    const progressEvents = [\n        \"error\",\n        \"progress\",\n        \"loadstart\",\n        \"loadend\",\n        \"load\",\n        \"timeout\",\n        \"abort\"\n    ];\n    const ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill;\n    const event = progressEvents.includes(type) ? new ProgressEventClass(type, {\n        lengthComputable: true,\n        loaded: (init == null ? void 0 : init.loaded) || 0,\n        total: (init == null ? void 0 : init.total) || 0\n    }) : new EventPolyfill(type, {\n        target,\n        currentTarget: target\n    });\n    return event;\n}\n// src/utils/findPropertySource.ts\nfunction findPropertySource(target, propertyName) {\n    if (!(propertyName in target)) {\n        return null;\n    }\n    const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName);\n    if (hasProperty) {\n        return target;\n    }\n    const prototype = Reflect.getPrototypeOf(target);\n    return prototype ? findPropertySource(prototype, propertyName) : null;\n}\n// src/utils/createProxy.ts\nfunction createProxy(target, options) {\n    const proxy = new Proxy(target, optionsToProxyHandler(options));\n    return proxy;\n}\nfunction optionsToProxyHandler(options) {\n    const { constructorCall, methodCall, getProperty, setProperty } = options;\n    const handler = {};\n    if (typeof constructorCall !== \"undefined\") {\n        handler.construct = function(target, args, newTarget) {\n            const next = Reflect.construct.bind(null, target, args, newTarget);\n            return constructorCall.call(newTarget, args, next);\n        };\n    }\n    handler.set = function(target, propertyName, nextValue, receiver) {\n        const next = ()=>{\n            const propertySource = findPropertySource(target, propertyName);\n            if (propertySource === null) return false;\n            const ownDescriptors = Reflect.getOwnPropertyDescriptor(propertySource, propertyName);\n            if (typeof (ownDescriptors == null ? void 0 : ownDescriptors.set) !== \"undefined\") {\n                ownDescriptors.set.apply(target, [\n                    nextValue\n                ]);\n                return true;\n            }\n            return Reflect.defineProperty(propertySource, propertyName, {\n                writable: true,\n                enumerable: true,\n                configurable: true,\n                value: nextValue\n            });\n        };\n        if (typeof setProperty !== \"undefined\") {\n            return setProperty.call(target, [\n                propertyName,\n                nextValue\n            ], next);\n        }\n        return next();\n    };\n    handler.get = function(target, propertyName, receiver) {\n        const next = ()=>target[propertyName];\n        const value = typeof getProperty !== \"undefined\" ? getProperty.call(target, [\n            propertyName,\n            receiver\n        ], next) : next();\n        if (typeof value === \"function\") {\n            return (...args)=>{\n                const next2 = value.bind(target, ...args);\n                if (typeof methodCall !== \"undefined\") {\n                    return methodCall.call(target, [\n                        propertyName,\n                        args\n                    ], next2);\n                }\n                return next2();\n            };\n        }\n        return value;\n    };\n    return handler;\n}\n// src/interceptors/XMLHttpRequest/utils/isDomParserSupportedType.ts\nfunction isDomParserSupportedType(type) {\n    const supportedTypes = [\n        \"application/xhtml+xml\",\n        \"application/xml\",\n        \"image/svg+xml\",\n        \"text/html\",\n        \"text/xml\"\n    ];\n    return supportedTypes.some((supportedType)=>{\n        return type.startsWith(supportedType);\n    });\n}\n// src/utils/parseJson.ts\nfunction parseJson(data) {\n    try {\n        const json = JSON.parse(data);\n        return json;\n    } catch (_) {\n        return null;\n    }\n}\n// src/interceptors/XMLHttpRequest/utils/createResponse.ts\nfunction createResponse(request, body) {\n    const responseBodyOrNull = _chunk_3IYIKC3X_mjs__WEBPACK_IMPORTED_MODULE_1__.responseStatusCodesWithoutBody.includes(request.status) ? null : body;\n    return new Response(responseBodyOrNull, {\n        status: request.status,\n        statusText: request.statusText,\n        headers: createHeadersFromXMLHttpReqestHeaders(request.getAllResponseHeaders())\n    });\n}\nfunction createHeadersFromXMLHttpReqestHeaders(headersString) {\n    const headers = new Headers();\n    const lines = headersString.split(/[\\r\\n]+/);\n    for (const line of lines){\n        if (line.trim() === \"\") {\n            continue;\n        }\n        const [name, ...parts] = line.split(\": \");\n        const value = parts.join(\": \");\n        headers.append(name, value);\n    }\n    return headers;\n}\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\nvar IS_MOCKED_RESPONSE = Symbol(\"isMockedResponse\");\nvar IS_NODE = (0,is_node_process__WEBPACK_IMPORTED_MODULE_7__.isNodeProcess)();\nvar XMLHttpRequestController = class {\n    constructor(initialRequest, logger){\n        this.initialRequest = initialRequest;\n        this.logger = logger;\n        this.method = \"GET\";\n        this.url = null;\n        this.events = /* @__PURE__ */ new Map();\n        this.requestId = (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_3__.uuidv4)();\n        this.requestHeaders = new Headers();\n        this.responseBuffer = new Uint8Array();\n        this.request = createProxy(initialRequest, {\n            setProperty: ([propertyName, nextValue], invoke)=>{\n                switch(propertyName){\n                    case \"ontimeout\":\n                        {\n                            const eventName = propertyName.slice(2);\n                            this.request.addEventListener(eventName, nextValue);\n                            return invoke();\n                        }\n                    default:\n                        {\n                            return invoke();\n                        }\n                }\n            },\n            methodCall: ([methodName, args], invoke)=>{\n                var _a;\n                switch(methodName){\n                    case \"open\":\n                        {\n                            const [method, url] = args;\n                            if (typeof url === \"undefined\") {\n                                this.method = \"GET\";\n                                this.url = toAbsoluteUrl(method);\n                            } else {\n                                this.method = method;\n                                this.url = toAbsoluteUrl(url);\n                            }\n                            this.logger = this.logger.extend(`${this.method} ${this.url.href}`);\n                            this.logger.info(\"open\", this.method, this.url.href);\n                            return invoke();\n                        }\n                    case \"addEventListener\":\n                        {\n                            const [eventName, listener] = args;\n                            this.registerEvent(eventName, listener);\n                            this.logger.info(\"addEventListener\", eventName, listener.name);\n                            return invoke();\n                        }\n                    case \"setRequestHeader\":\n                        {\n                            const [name, value] = args;\n                            this.requestHeaders.set(name, value);\n                            this.logger.info(\"setRequestHeader\", name, value);\n                            return invoke();\n                        }\n                    case \"send\":\n                        {\n                            const [body] = args;\n                            if (body != null) {\n                                this.requestBody = typeof body === \"string\" ? (0,_chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_0__.encodeBuffer)(body) : body;\n                            }\n                            this.request.addEventListener(\"load\", ()=>{\n                                if (typeof this.onResponse !== \"undefined\") {\n                                    const fetchResponse = createResponse(this.request, /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */ this.request.response);\n                                    this.onResponse.call(this, {\n                                        response: fetchResponse,\n                                        isMockedResponse: IS_MOCKED_RESPONSE in this.request,\n                                        request: fetchRequest,\n                                        requestId: this.requestId\n                                    });\n                                }\n                            });\n                            const fetchRequest = this.toFetchApiRequest();\n                            const onceRequestSettled = ((_a = this.onRequest) == null ? void 0 : _a.call(this, {\n                                request: fetchRequest,\n                                requestId: this.requestId\n                            })) || Promise.resolve();\n                            onceRequestSettled.finally(()=>{\n                                if (this.request.readyState < this.request.LOADING) {\n                                    this.logger.info(\"request callback settled but request has not been handled (readystate %d), performing as-is...\", this.request.readyState);\n                                    if (IS_NODE) {\n                                        this.request.setRequestHeader(\"X-Request-Id\", this.requestId);\n                                    }\n                                    return invoke();\n                                }\n                            });\n                            break;\n                        }\n                    default:\n                        {\n                            return invoke();\n                        }\n                }\n            }\n        });\n    }\n    registerEvent(eventName, listener) {\n        const prevEvents = this.events.get(eventName) || [];\n        const nextEvents = prevEvents.concat(listener);\n        this.events.set(eventName, nextEvents);\n        this.logger.info('registered event \"%s\"', eventName, listener.name);\n    }\n    /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */ respondWith(response) {\n        this.logger.info(\"responding with a mocked response: %d %s\", response.status, response.statusText);\n        define(this.request, IS_MOCKED_RESPONSE, true);\n        define(this.request, \"status\", response.status);\n        define(this.request, \"statusText\", response.statusText);\n        define(this.request, \"responseURL\", this.url.href);\n        this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n            apply: (_, __, args)=>{\n                this.logger.info(\"getResponseHeader\", args[0]);\n                if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n                    this.logger.info(\"headers not received yet, returning null\");\n                    return null;\n                }\n                const headerValue = response.headers.get(args[0]);\n                this.logger.info('resolved response header \"%s\" to', args[0], headerValue);\n                return headerValue;\n            }\n        });\n        this.request.getAllResponseHeaders = new Proxy(this.request.getAllResponseHeaders, {\n            apply: ()=>{\n                this.logger.info(\"getAllResponseHeaders\");\n                if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n                    this.logger.info(\"headers not received yet, returning empty string\");\n                    return \"\";\n                }\n                const headersList = Array.from(response.headers.entries());\n                const allHeaders = headersList.map(([headerName, headerValue])=>{\n                    return `${headerName}: ${headerValue}`;\n                }).join(\"\\r\\n\");\n                this.logger.info(\"resolved all response headers to\", allHeaders);\n                return allHeaders;\n            }\n        });\n        Object.defineProperties(this.request, {\n            response: {\n                enumerable: true,\n                configurable: false,\n                get: ()=>this.response\n            },\n            responseText: {\n                enumerable: true,\n                configurable: false,\n                get: ()=>this.responseText\n            },\n            responseXML: {\n                enumerable: true,\n                configurable: false,\n                get: ()=>this.responseXML\n            }\n        });\n        const totalResponseBodyLength = response.headers.has(\"Content-Length\") ? Number(response.headers.get(\"Content-Length\")) : /**\n       * @todo Infer the response body length from the response body.\n       */ void 0;\n        this.logger.info(\"calculated response body length\", totalResponseBodyLength);\n        this.trigger(\"loadstart\", {\n            loaded: 0,\n            total: totalResponseBodyLength\n        });\n        this.setReadyState(this.request.HEADERS_RECEIVED);\n        this.setReadyState(this.request.LOADING);\n        const finalizeResponse = ()=>{\n            this.logger.info(\"finalizing the mocked response...\");\n            this.setReadyState(this.request.DONE);\n            this.trigger(\"load\", {\n                loaded: this.responseBuffer.byteLength,\n                total: totalResponseBodyLength\n            });\n            this.trigger(\"loadend\", {\n                loaded: this.responseBuffer.byteLength,\n                total: totalResponseBodyLength\n            });\n        };\n        if (response.body) {\n            this.logger.info(\"mocked response has body, streaming...\");\n            const reader = response.body.getReader();\n            const readNextResponseBodyChunk = async ()=>{\n                const { value, done } = await reader.read();\n                if (done) {\n                    this.logger.info(\"response body stream done!\");\n                    finalizeResponse();\n                    return;\n                }\n                if (value) {\n                    this.logger.info(\"read response body chunk:\", value);\n                    this.responseBuffer = concatArrayBuffer(this.responseBuffer, value);\n                    this.trigger(\"progress\", {\n                        loaded: this.responseBuffer.byteLength,\n                        total: totalResponseBodyLength\n                    });\n                }\n                readNextResponseBodyChunk();\n            };\n            readNextResponseBodyChunk();\n        } else {\n            finalizeResponse();\n        }\n    }\n    responseBufferToText() {\n        return (0,_chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_0__.decodeBuffer)(this.responseBuffer);\n    }\n    get response() {\n        this.logger.info(\"getResponse (responseType: %s)\", this.request.responseType);\n        if (this.request.readyState !== this.request.DONE) {\n            return null;\n        }\n        switch(this.request.responseType){\n            case \"json\":\n                {\n                    const responseJson = parseJson(this.responseBufferToText());\n                    this.logger.info(\"resolved response JSON\", responseJson);\n                    return responseJson;\n                }\n            case \"arraybuffer\":\n                {\n                    const arrayBuffer = (0,_chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_0__.toArrayBuffer)(this.responseBuffer);\n                    this.logger.info(\"resolved response ArrayBuffer\", arrayBuffer);\n                    return arrayBuffer;\n                }\n            case \"blob\":\n                {\n                    const mimeType = this.request.getResponseHeader(\"Content-Type\") || \"text/plain\";\n                    const responseBlob = new Blob([\n                        this.responseBufferToText()\n                    ], {\n                        type: mimeType\n                    });\n                    this.logger.info(\"resolved response Blob (mime type: %s)\", responseBlob, mimeType);\n                    return responseBlob;\n                }\n            default:\n                {\n                    const responseText = this.responseBufferToText();\n                    this.logger.info('resolving \"%s\" response type as text', this.request.responseType, responseText);\n                    return responseText;\n                }\n        }\n    }\n    get responseText() {\n        (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(this.request.responseType === \"\" || this.request.responseType === \"text\", \"InvalidStateError: The object is in invalid state.\");\n        if (this.request.readyState !== this.request.LOADING && this.request.readyState !== this.request.DONE) {\n            return \"\";\n        }\n        const responseText = this.responseBufferToText();\n        this.logger.info('getResponseText: \"%s\"', responseText);\n        return responseText;\n    }\n    get responseXML() {\n        (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(this.request.responseType === \"\" || this.request.responseType === \"document\", \"InvalidStateError: The object is in invalid state.\");\n        if (this.request.readyState !== this.request.DONE) {\n            return null;\n        }\n        const contentType = this.request.getResponseHeader(\"Content-Type\") || \"\";\n        if (typeof DOMParser === \"undefined\") {\n            console.warn(\"Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.\");\n            return null;\n        }\n        if (isDomParserSupportedType(contentType)) {\n            return new DOMParser().parseFromString(this.responseBufferToText(), contentType);\n        }\n        return null;\n    }\n    errorWith(error) {\n        this.logger.info(\"responding with an error\");\n        this.setReadyState(this.request.DONE);\n        this.trigger(\"error\");\n        this.trigger(\"loadend\");\n    }\n    /**\n   * Transitions this request's `readyState` to the given one.\n   */ setReadyState(nextReadyState) {\n        this.logger.info(\"setReadyState: %d -> %d\", this.request.readyState, nextReadyState);\n        if (this.request.readyState === nextReadyState) {\n            this.logger.info(\"ready state identical, skipping transition...\");\n            return;\n        }\n        define(this.request, \"readyState\", nextReadyState);\n        this.logger.info(\"set readyState to: %d\", nextReadyState);\n        if (nextReadyState !== this.request.UNSENT) {\n            this.logger.info('triggerring \"readystatechange\" event...');\n            this.trigger(\"readystatechange\");\n        }\n    }\n    /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */ trigger(eventName, options) {\n        const callback = this.request[`on${eventName}`];\n        const event = createEvent(this.request, eventName, options);\n        this.logger.info('trigger \"%s\"', eventName, options || \"\");\n        if (typeof callback === \"function\") {\n            this.logger.info('found a direct \"%s\" callback, calling...', eventName);\n            callback.call(this.request, event);\n        }\n        for (const [registeredEventName, listeners] of this.events){\n            if (registeredEventName === eventName) {\n                this.logger.info('found %d listener(s) for \"%s\" event, calling...', listeners.length, eventName);\n                listeners.forEach((listener)=>listener.call(this.request, event));\n            }\n        }\n    }\n    /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */ toFetchApiRequest() {\n        this.logger.info(\"converting request to a Fetch API Request...\");\n        const fetchRequest = new Request(this.url.href, {\n            method: this.method,\n            headers: this.requestHeaders,\n            /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */ credentials: this.request.withCredentials ? \"include\" : \"same-origin\",\n            body: [\n                \"GET\",\n                \"HEAD\"\n            ].includes(this.method) ? null : this.requestBody\n        });\n        const proxyHeaders = createProxy(fetchRequest.headers, {\n            methodCall: ([methodName, args], invoke)=>{\n                switch(methodName){\n                    case \"append\":\n                    case \"set\":\n                        {\n                            const [headerName, headerValue] = args;\n                            this.request.setRequestHeader(headerName, headerValue);\n                            break;\n                        }\n                    case \"delete\":\n                        {\n                            const [headerName] = args;\n                            console.warn(`XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`);\n                            break;\n                        }\n                }\n                return invoke();\n            }\n        });\n        define(fetchRequest, \"headers\", proxyHeaders);\n        this.logger.info(\"converted request to a Fetch API Request!\", fetchRequest);\n        return fetchRequest;\n    }\n};\nfunction toAbsoluteUrl(url) {\n    return new URL(url.toString(), location.href);\n}\nfunction define(target, property, value) {\n    Reflect.defineProperty(target, property, {\n        // Ensure writable properties to allow redefining readonly properties.\n        writable: true,\n        enumerable: true,\n        value\n    });\n}\n// src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts\nfunction createXMLHttpRequestProxy({ emitter, logger }) {\n    const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n        construct (target, args, newTarget) {\n            logger.info(\"constructed new XMLHttpRequest\");\n            const originalRequest = Reflect.construct(target, args, newTarget);\n            const prototypeDescriptors = Object.getOwnPropertyDescriptors(target.prototype);\n            for(const propertyName in prototypeDescriptors){\n                Reflect.defineProperty(originalRequest, propertyName, prototypeDescriptors[propertyName]);\n            }\n            const xhrRequestController = new XMLHttpRequestController(originalRequest, logger);\n            xhrRequestController.onRequest = async function({ request, requestId }) {\n                const { interactiveRequest, requestController } = (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_3__.toInteractiveRequest)(request);\n                this.logger.info(\"awaiting mocked response...\");\n                emitter.once(\"request\", ({ requestId: pendingRequestId })=>{\n                    if (pendingRequestId !== requestId) {\n                        return;\n                    }\n                    if (requestController.responsePromise.state === \"pending\") {\n                        requestController.respondWith(void 0);\n                    }\n                });\n                const resolverResult = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_6__.until)(async ()=>{\n                    this.logger.info('emitting the \"request\" event for %s listener(s)...', emitter.listenerCount(\"request\"));\n                    await (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_3__.emitAsync)(emitter, \"request\", {\n                        request: interactiveRequest,\n                        requestId\n                    });\n                    this.logger.info('all \"request\" listeners settled!');\n                    const mockedResponse2 = await requestController.responsePromise;\n                    this.logger.info(\"event.respondWith called with:\", mockedResponse2);\n                    return mockedResponse2;\n                });\n                if (resolverResult.error) {\n                    this.logger.info(\"request listener threw an exception, aborting request...\", resolverResult.error);\n                    xhrRequestController.errorWith(resolverResult.error);\n                    return;\n                }\n                const mockedResponse = resolverResult.data;\n                if (typeof mockedResponse !== \"undefined\") {\n                    this.logger.info(\"received mocked response: %d %s\", mockedResponse.status, mockedResponse.statusText);\n                    if (mockedResponse.type === \"error\") {\n                        this.logger.info(\"received a network error response, rejecting the request promise...\");\n                        xhrRequestController.errorWith(new TypeError(\"Network error\"));\n                        return;\n                    }\n                    return xhrRequestController.respondWith(mockedResponse);\n                }\n                this.logger.info(\"no mocked response received, performing request as-is...\");\n            };\n            xhrRequestController.onResponse = async function({ response, isMockedResponse, request, requestId }) {\n                this.logger.info('emitting the \"response\" event for %s listener(s)...', emitter.listenerCount(\"response\"));\n                emitter.emit(\"response\", {\n                    response,\n                    isMockedResponse,\n                    request,\n                    requestId\n                });\n            };\n            return xhrRequestController.request;\n        }\n    });\n    return XMLHttpRequestProxy;\n}\n// src/interceptors/XMLHttpRequest/index.ts\nvar _XMLHttpRequestInterceptor = class extends _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_4__.Interceptor {\n    constructor(){\n        super(_XMLHttpRequestInterceptor.interceptorSymbol);\n    }\n    checkEnvironment() {\n        return typeof globalThis.XMLHttpRequest !== \"undefined\";\n    }\n    setup() {\n        const logger = this.logger.extend(\"setup\");\n        logger.info('patching \"XMLHttpRequest\" module...');\n        const PureXMLHttpRequest = globalThis.XMLHttpRequest;\n        (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(!PureXMLHttpRequest[_chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE], 'Failed to patch the \"XMLHttpRequest\" module: already patched.');\n        globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n            emitter: this.emitter,\n            logger: this.logger\n        });\n        logger.info('native \"XMLHttpRequest\" module patched!', globalThis.XMLHttpRequest.name);\n        Object.defineProperty(globalThis.XMLHttpRequest, _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE, {\n            enumerable: true,\n            configurable: true,\n            value: true\n        });\n        this.subscriptions.push(()=>{\n            Object.defineProperty(globalThis.XMLHttpRequest, _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE, {\n                value: void 0\n            });\n            globalThis.XMLHttpRequest = PureXMLHttpRequest;\n            logger.info('native \"XMLHttpRequest\" module restored!', globalThis.XMLHttpRequest.name);\n        });\n    }\n};\nvar XMLHttpRequestInterceptor = _XMLHttpRequestInterceptor;\nXMLHttpRequestInterceptor.interceptorSymbol = Symbol(\"xhr\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-FB53TMYN.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-G5IEXC7T.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-G5IEXC7T.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientRequestInterceptor: () => (/* binding */ ClientRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_3IYIKC3X_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-3IYIKC3X.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-3IYIKC3X.mjs\");\n/* harmony import */ var _chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-YQGTMMOZ.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs\");\n/* harmony import */ var _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-GM3YBSM3.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @open-draft/until */ \"(rsc)/./node_modules/@open-draft/until/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(rsc)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n/* harmony import */ var _open_draft_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @open-draft/logger */ \"(rsc)/./node_modules/@open-draft/logger/lib/index.mjs\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! url */ \"url\");\n\n\n\n// src/interceptors/ClientRequest/index.ts\n\n\n// src/interceptors/ClientRequest/NodeClientRequest.ts\n\n\n\n// src/interceptors/ClientRequest/utils/normalizeClientRequestEndArgs.ts\n\nvar logger = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_7__.Logger(\"utils getUrlByRequestOptions\");\nfunction normalizeClientRequestEndArgs(...args) {\n    logger.info(\"arguments\", args);\n    const normalizedArgs = new Array(3).fill(null).map((value, index)=>args[index] || value);\n    normalizedArgs.sort((a, b)=>{\n        if (typeof a === \"function\") {\n            return 1;\n        }\n        if (typeof b === \"function\") {\n            return -1;\n        }\n        if (typeof a === \"string\" && typeof b === \"string\") {\n            return normalizedArgs.indexOf(a) - normalizedArgs.indexOf(b);\n        }\n        return 0;\n    });\n    logger.info(\"normalized args\", normalizedArgs);\n    return normalizedArgs;\n}\n// src/interceptors/ClientRequest/utils/normalizeClientRequestWriteArgs.ts\n\nvar logger2 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_7__.Logger(\"http normalizeWriteArgs\");\nfunction normalizeClientRequestWriteArgs(args) {\n    logger2.info(\"normalizing ClientRequest.write arguments...\", args);\n    const chunk = args[0];\n    const encoding = typeof args[1] === \"string\" ? args[1] : void 0;\n    const callback = typeof args[1] === \"function\" ? args[1] : args[2];\n    const writeArgs = [\n        chunk,\n        encoding,\n        callback\n    ];\n    logger2.info(\"successfully normalized ClientRequest.write arguments:\", writeArgs);\n    return writeArgs;\n}\n// src/interceptors/ClientRequest/utils/cloneIncomingMessage.ts\n\n\nvar IS_CLONE = Symbol(\"isClone\");\nfunction cloneIncomingMessage(message) {\n    const clone = message.pipe(new stream__WEBPACK_IMPORTED_MODULE_8__.PassThrough());\n    inheritProperties(message, clone);\n    const clonedPrototype = Object.create(http__WEBPACK_IMPORTED_MODULE_3__.IncomingMessage.prototype);\n    getPrototypes(clone).forEach((prototype)=>{\n        inheritProperties(prototype, clonedPrototype);\n    });\n    Object.setPrototypeOf(clone, clonedPrototype);\n    Object.defineProperty(clone, IS_CLONE, {\n        enumerable: true,\n        value: true\n    });\n    return clone;\n}\nfunction getPrototypes(source) {\n    const prototypes = [];\n    let current = source;\n    while(current = Object.getPrototypeOf(current)){\n        prototypes.push(current);\n    }\n    return prototypes;\n}\nfunction inheritProperties(source, target) {\n    const properties = [\n        ...Object.getOwnPropertyNames(source),\n        ...Object.getOwnPropertySymbols(source)\n    ];\n    for (const property of properties){\n        if (target.hasOwnProperty(property)) {\n            continue;\n        }\n        const descriptor = Object.getOwnPropertyDescriptor(source, property);\n        if (!descriptor) {\n            continue;\n        }\n        Object.defineProperty(target, property, descriptor);\n    }\n}\n// src/interceptors/ClientRequest/utils/createResponse.ts\nfunction createResponse(message) {\n    const responseBodyOrNull = _chunk_3IYIKC3X_mjs__WEBPACK_IMPORTED_MODULE_0__.responseStatusCodesWithoutBody.includes(message.statusCode || 200) ? null : new ReadableStream({\n        start (controller) {\n            message.on(\"data\", (chunk)=>controller.enqueue(chunk));\n            message.on(\"end\", ()=>controller.close());\n        }\n    });\n    return new Response(responseBodyOrNull, {\n        status: message.statusCode,\n        statusText: message.statusMessage,\n        headers: createHeadersFromIncomingHttpHeaders(message.headers)\n    });\n}\nfunction createHeadersFromIncomingHttpHeaders(httpHeaders) {\n    const headers = new Headers();\n    for(const headerName in httpHeaders){\n        const headerValues = httpHeaders[headerName];\n        if (typeof headerValues === \"undefined\") {\n            continue;\n        }\n        if (Array.isArray(headerValues)) {\n            headerValues.forEach((headerValue)=>{\n                headers.append(headerName, headerValue);\n            });\n            continue;\n        }\n        headers.set(headerName, headerValues);\n    }\n    return headers;\n}\n// src/interceptors/ClientRequest/utils/createRequest.ts\nfunction createRequest(clientRequest) {\n    const headers = new Headers();\n    const outgoingHeaders = clientRequest.getHeaders();\n    for(const headerName in outgoingHeaders){\n        const headerValue = outgoingHeaders[headerName];\n        if (typeof headerValue === \"undefined\") {\n            continue;\n        }\n        const valuesList = Array.prototype.concat([], headerValue);\n        for (const value of valuesList){\n            headers.append(headerName, value.toString());\n        }\n    }\n    if (clientRequest.url.username || clientRequest.url.password) {\n        const auth = `${clientRequest.url.username || \"\"}:${clientRequest.url.password || \"\"}`;\n        headers.set(\"Authorization\", `Basic ${btoa(auth)}`);\n        clientRequest.url.username = \"\";\n        clientRequest.url.password = \"\";\n    }\n    const method = clientRequest.method || \"GET\";\n    return new Request(clientRequest.url, {\n        method,\n        headers,\n        credentials: \"same-origin\",\n        body: method === \"HEAD\" || method === \"GET\" ? null : clientRequest.requestBuffer\n    });\n}\n// src/utils/getValueBySymbol.ts\nfunction getValueBySymbol(symbolName, source) {\n    const ownSymbols = Object.getOwnPropertySymbols(source);\n    const symbol = ownSymbols.find((symbol2)=>{\n        return symbol2.description === symbolName;\n    });\n    if (symbol) {\n        return Reflect.get(source, symbol);\n    }\n    return;\n}\n// src/utils/isObject.ts\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n// src/utils/getRawFetchHeaders.ts\nfunction getRawFetchHeaders(headers) {\n    const headersList = getValueBySymbol(\"headers list\", headers);\n    if (!headersList) {\n        return;\n    }\n    const headersMap = getValueBySymbol(\"headers map\", headersList);\n    if (!headersMap || !isHeadersMapWithRawHeaderNames(headersMap)) {\n        return;\n    }\n    const rawHeaders = /* @__PURE__ */ new Map();\n    headersMap.forEach(({ name, value })=>{\n        rawHeaders.set(name, value);\n    });\n    return rawHeaders;\n}\nfunction isHeadersMapWithRawHeaderNames(headersMap) {\n    return Array.from(headersMap.values()).every((value)=>{\n        return isObject(value) && \"name\" in value;\n    });\n}\n// src/interceptors/ClientRequest/NodeClientRequest.ts\nvar _NodeClientRequest = class extends http__WEBPACK_IMPORTED_MODULE_3__.ClientRequest {\n    constructor([url, requestOptions, callback], options){\n        super(requestOptions, callback);\n        this.chunks = [];\n        this.logger = options.logger.extend(`request ${requestOptions.method} ${url.href}`);\n        this.logger.info(\"constructing ClientRequest using options:\", {\n            url,\n            requestOptions,\n            callback\n        });\n        this.state = 0 /* Idle */ ;\n        this.url = url;\n        this.emitter = options.emitter;\n        this.requestBuffer = null;\n        this.response = new http__WEBPACK_IMPORTED_MODULE_3__.IncomingMessage(this.socket);\n    }\n    writeRequestBodyChunk(chunk, encoding) {\n        if (chunk == null) {\n            return;\n        }\n        if (this.requestBuffer == null) {\n            this.requestBuffer = Buffer.from([]);\n        }\n        const resolvedChunk = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n        this.requestBuffer = Buffer.concat([\n            this.requestBuffer,\n            resolvedChunk\n        ]);\n    }\n    write(...args) {\n        var _a;\n        const [chunk, encoding, callback] = normalizeClientRequestWriteArgs(args);\n        this.logger.info(\"write:\", {\n            chunk,\n            encoding,\n            callback\n        });\n        this.chunks.push({\n            chunk,\n            encoding\n        });\n        this.writeRequestBodyChunk(chunk, encoding);\n        this.logger.info(\"chunk successfully stored!\", (_a = this.requestBuffer) == null ? void 0 : _a.byteLength);\n        if (!chunk || chunk.length === 0) {\n            this.logger.info(\"written chunk is empty, skipping callback...\");\n        } else {\n            callback == null ? void 0 : callback();\n        }\n        return true;\n    }\n    end(...args) {\n        this.logger.info(\"end\", args);\n        const requestId = (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__.uuidv4)();\n        const [chunk, encoding, callback] = normalizeClientRequestEndArgs(...args);\n        this.logger.info(\"normalized arguments:\", {\n            chunk,\n            encoding,\n            callback\n        });\n        this.writeRequestBodyChunk(chunk, encoding || void 0);\n        this.state = 2 /* Sent */ ;\n        const capturedRequest = createRequest(this);\n        const { interactiveRequest, requestController } = (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__.toInteractiveRequest)(capturedRequest);\n        Object.defineProperty(capturedRequest, \"respondWith\", {\n            value: requestController.respondWith.bind(requestController)\n        });\n        if (this.getHeader(\"X-Request-Id\") != null) {\n            this.removeHeader(\"X-Request-Id\");\n            return this.passthrough(chunk, encoding, callback);\n        }\n        this.emitter.once(\"request\", ({ requestId: pendingRequestId })=>{\n            if (pendingRequestId !== requestId) {\n                return;\n            }\n            if (requestController.responsePromise.state === \"pending\") {\n                this.logger.info(\"request has not been handled in listeners, executing fail-safe listener...\");\n                requestController.responsePromise.resolve(void 0);\n            }\n        });\n        (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_5__.until)(async ()=>{\n            this.logger.info('emitting the \"request\" event for %d listener(s)...', this.emitter.listenerCount(\"request\"));\n            this.state = 3 /* MockLookupStart */ ;\n            await (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__.emitAsync)(this.emitter, \"request\", {\n                request: interactiveRequest,\n                requestId\n            });\n            this.logger.info('all \"request\" listeners done!');\n            const mockedResponse = await requestController.responsePromise;\n            this.logger.info(\"event.respondWith called with:\", mockedResponse);\n            return mockedResponse;\n        }).then((resolverResult)=>{\n            this.logger.info(\"the listeners promise awaited!\");\n            this.state = 4 /* MockLookupEnd */ ;\n            if (!this.headersSent) {\n                for (const [headerName, headerValue] of capturedRequest.headers){\n                    this.setHeader(headerName, headerValue);\n                }\n            }\n            if (resolverResult.error) {\n                this.logger.info(\"encountered resolver exception, aborting request...\", resolverResult.error);\n                this.destroyed = true;\n                this.emit(\"error\", resolverResult.error);\n                this.terminate();\n                return this;\n            }\n            const mockedResponse = resolverResult.data;\n            if (mockedResponse) {\n                this.logger.info(\"received mocked response:\", mockedResponse.status, mockedResponse.statusText);\n                this.destroyed = false;\n                if (mockedResponse.type === \"error\") {\n                    this.logger.info(\"received network error response, aborting request...\");\n                    this.emit(\"error\", new TypeError(\"Network error\"));\n                    this.terminate();\n                    return this;\n                }\n                const responseClone = mockedResponse.clone();\n                this.respondWith(mockedResponse);\n                this.logger.info(mockedResponse.status, mockedResponse.statusText, \"(MOCKED)\");\n                callback == null ? void 0 : callback();\n                this.logger.info('emitting the custom \"response\" event...');\n                this.emitter.emit(\"response\", {\n                    response: responseClone,\n                    isMockedResponse: true,\n                    request: capturedRequest,\n                    requestId\n                });\n                this.logger.info(\"request (mock) is completed\");\n                return this;\n            }\n            this.logger.info(\"no mocked response received!\");\n            this.once(\"response-internal\", (message)=>{\n                this.logger.info(message.statusCode, message.statusMessage);\n                this.logger.info(\"original response headers:\", message.headers);\n                this.logger.info('emitting the custom \"response\" event...');\n                this.emitter.emit(\"response\", {\n                    response: createResponse(message),\n                    isMockedResponse: false,\n                    request: capturedRequest,\n                    requestId\n                });\n            });\n            return this.passthrough(chunk, encoding, callback);\n        });\n        return this;\n    }\n    emit(event, ...data) {\n        this.logger.info(\"emit: %s\", event);\n        if (event === \"response\") {\n            this.logger.info('found \"response\" event, cloning the response...');\n            try {\n                const response = data[0];\n                const firstClone = cloneIncomingMessage(response);\n                const secondClone = cloneIncomingMessage(response);\n                this.emit(\"response-internal\", secondClone);\n                this.logger.info('response successfully cloned, emitting \"response\" event...');\n                return super.emit(event, firstClone, ...data.slice(1));\n            } catch (error) {\n                this.logger.info(\"error when cloning response:\", error);\n                return super.emit(event, ...data);\n            }\n        }\n        if (event === \"error\") {\n            const error = data[0];\n            const errorCode = error.code || \"\";\n            this.logger.info(\"error:\\n\", error);\n            if (_NodeClientRequest.suppressErrorCodes.includes(errorCode)) {\n                if (this.state < 4 /* MockLookupEnd */ ) {\n                    if (!this.capturedError) {\n                        this.capturedError = error;\n                        this.logger.info(\"captured the first error:\", this.capturedError);\n                    }\n                    return false;\n                }\n                if (this.state === 5 /* ResponseReceived */  && this.responseType === \"mock\") {\n                    return false;\n                }\n            }\n        }\n        return super.emit(event, ...data);\n    }\n    /**\n   * Performs the intercepted request as-is.\n   * Replays the captured request body chunks,\n   * still emits the internal events, and wraps\n   * up the request with `super.end()`.\n   */ passthrough(chunk, encoding, callback) {\n        this.state = 5 /* ResponseReceived */ ;\n        this.responseType = \"passthrough\";\n        if (this.capturedError) {\n            this.emit(\"error\", this.capturedError);\n            return this;\n        }\n        this.logger.info(\"writing request chunks...\", this.chunks);\n        for (const { chunk: chunk2, encoding: encoding2 } of this.chunks){\n            if (encoding2) {\n                super.write(chunk2, encoding2);\n            } else {\n                super.write(chunk2);\n            }\n        }\n        this.once(\"error\", (error)=>{\n            this.logger.info(\"original request error:\", error);\n        });\n        this.once(\"abort\", ()=>{\n            this.logger.info(\"original request aborted!\");\n        });\n        this.once(\"response-internal\", (message)=>{\n            this.logger.info(message.statusCode, message.statusMessage);\n            this.logger.info(\"original response headers:\", message.headers);\n        });\n        this.logger.info(\"performing original request...\");\n        return super.end(...[\n            chunk,\n            encoding,\n            callback\n        ].filter(Boolean));\n    }\n    /**\n   * Responds to this request instance using a mocked response.\n   */ respondWith(mockedResponse) {\n        this.logger.info(\"responding with a mocked response...\", mockedResponse);\n        this.state = 5 /* ResponseReceived */ ;\n        this.responseType = \"mock\";\n        Object.defineProperties(this, {\n            writableFinished: {\n                value: true\n            },\n            writableEnded: {\n                value: true\n            }\n        });\n        this.emit(\"finish\");\n        const { status, statusText, headers, body } = mockedResponse;\n        this.response.statusCode = status;\n        this.response.statusMessage = statusText;\n        const rawHeaders = getRawFetchHeaders(headers) || headers;\n        if (rawHeaders) {\n            this.response.headers = {};\n            rawHeaders.forEach((headerValue, headerName)=>{\n                this.response.rawHeaders.push(headerName, headerValue);\n                const insensitiveHeaderName = headerName.toLowerCase();\n                const prevHeaders = this.response.headers[insensitiveHeaderName];\n                this.response.headers[insensitiveHeaderName] = prevHeaders ? Array.prototype.concat([], prevHeaders, headerValue) : headerValue;\n            });\n        }\n        this.logger.info(\"mocked response headers ready:\", headers);\n        this.res = this.response;\n        this.emit(\"response\", this.response);\n        const isResponseStreamFinished = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_6__.DeferredPromise();\n        const finishResponseStream = ()=>{\n            this.logger.info(\"finished response stream!\");\n            this.response.push(null);\n            this.response.complete = true;\n            isResponseStreamFinished.resolve();\n        };\n        if (body) {\n            const bodyReader = body.getReader();\n            const readNextChunk = async ()=>{\n                const { done, value } = await bodyReader.read();\n                if (done) {\n                    finishResponseStream();\n                    return;\n                }\n                this.response.emit(\"data\", value);\n                return readNextChunk();\n            };\n            readNextChunk();\n        } else {\n            finishResponseStream();\n        }\n        isResponseStreamFinished.then(()=>{\n            this.logger.info(\"finalizing response...\");\n            this.response.emit(\"end\");\n            this.terminate();\n            this.logger.info(\"request complete!\");\n        });\n    }\n    /**\n   * Terminates a pending request.\n   */ terminate() {\n        var _a;\n        (_a = this.agent) == null ? void 0 : _a.destroy();\n    }\n};\nvar NodeClientRequest = _NodeClientRequest;\n/**\n * The list of internal Node.js errors to suppress while\n * using the \"mock\" response source.\n */ NodeClientRequest.suppressErrorCodes = [\n    \"ENOTFOUND\",\n    \"ECONNREFUSED\",\n    \"ECONNRESET\",\n    \"EAI_AGAIN\",\n    \"ENETUNREACH\",\n    \"EHOSTUNREACH\"\n];\n// src/interceptors/ClientRequest/utils/normalizeClientRequestArgs.ts\n\n\n\n\n// src/utils/getRequestOptionsByUrl.ts\nfunction getRequestOptionsByUrl(url) {\n    const options = {\n        method: \"GET\",\n        protocol: url.protocol,\n        hostname: typeof url.hostname === \"string\" && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        path: `${url.pathname}${url.search || \"\"}`\n    };\n    if (!!url.port) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username}:${url.password}`;\n    }\n    return options;\n}\n// src/utils/getUrlByRequestOptions.ts\n\n\nvar logger3 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_7__.Logger(\"utils getUrlByRequestOptions\");\nvar DEFAULT_PATH = \"/\";\nvar DEFAULT_PROTOCOL = \"http:\";\nvar DEFAULT_HOST = \"localhost\";\nvar SSL_PORT = 443;\nfunction getAgent(options) {\n    return options.agent instanceof http__WEBPACK_IMPORTED_MODULE_3__.Agent ? options.agent : void 0;\n}\nfunction getProtocolByRequestOptions(options) {\n    var _a;\n    if (options.protocol) {\n        return options.protocol;\n    }\n    const agent = getAgent(options);\n    const agentProtocol = agent == null ? void 0 : agent.protocol;\n    if (agentProtocol) {\n        return agentProtocol;\n    }\n    const port = getPortByRequestOptions(options);\n    const isSecureRequest = options.cert || port === SSL_PORT;\n    return isSecureRequest ? \"https:\" : ((_a = options.uri) == null ? void 0 : _a.protocol) || DEFAULT_PROTOCOL;\n}\nfunction getPortByRequestOptions(options) {\n    if (options.port) {\n        return Number(options.port);\n    }\n    if (options.hostname != null) {\n        const [, extractedPort] = options.hostname.match(/:(\\d+)$/) || [];\n        if (extractedPort != null) {\n            return Number(extractedPort);\n        }\n    }\n    const agent = getAgent(options);\n    if (agent == null ? void 0 : agent.options.port) {\n        return Number(agent.options.port);\n    }\n    if (agent == null ? void 0 : agent.defaultPort) {\n        return Number(agent.defaultPort);\n    }\n    return void 0;\n}\nfunction getHostByRequestOptions(options) {\n    const { hostname, host } = options;\n    if (hostname != null) {\n        return hostname.replace(/:\\d+$/, \"\");\n    }\n    return host || DEFAULT_HOST;\n}\nfunction getAuthByRequestOptions(options) {\n    if (options.auth) {\n        const [username, password] = options.auth.split(\":\");\n        return {\n            username,\n            password\n        };\n    }\n}\nfunction isRawIPv6Address(host) {\n    return host.includes(\":\") && !host.startsWith(\"[\") && !host.endsWith(\"]\");\n}\nfunction getHostname(host, port) {\n    const portString = typeof port !== \"undefined\" ? `:${port}` : \"\";\n    if (isRawIPv6Address(host)) {\n        return `[${host}]${portString}`;\n    }\n    if (typeof port === \"undefined\") {\n        return host;\n    }\n    return `${host}${portString}`;\n}\nfunction getUrlByRequestOptions(options) {\n    logger3.info(\"request options\", options);\n    if (options.uri) {\n        logger3.info('constructing url from explicitly provided \"options.uri\": %s', options.uri);\n        return new URL(options.uri.href);\n    }\n    logger3.info(\"figuring out url from request options...\");\n    const protocol = getProtocolByRequestOptions(options);\n    logger3.info(\"protocol\", protocol);\n    const host = getHostByRequestOptions(options);\n    logger3.info(\"host\", host);\n    const port = getPortByRequestOptions(options);\n    logger3.info(\"port\", port);\n    const hostname = getHostname(host, port);\n    logger3.info(\"hostname\", hostname);\n    const path = options.path || DEFAULT_PATH;\n    logger3.info(\"path\", path);\n    const credentials = getAuthByRequestOptions(options);\n    logger3.info(\"credentials\", credentials);\n    const authString = credentials ? `${credentials.username}:${credentials.password}@` : \"\";\n    logger3.info(\"auth string:\", authString);\n    const url = new URL(`${protocol}//${hostname}${path}`);\n    url.username = (credentials == null ? void 0 : credentials.username) || \"\";\n    url.password = (credentials == null ? void 0 : credentials.password) || \"\";\n    logger3.info(\"created url:\", url);\n    return url;\n}\n// src/utils/cloneObject.ts\n\nvar logger4 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_7__.Logger(\"cloneObject\");\nfunction isPlainObject(obj) {\n    var _a;\n    logger4.info(\"is plain object?\", obj);\n    if (obj == null || !((_a = obj.constructor) == null ? void 0 : _a.name)) {\n        logger4.info(\"given object is undefined, not a plain object...\");\n        return false;\n    }\n    logger4.info(\"checking the object constructor:\", obj.constructor.name);\n    return obj.constructor.name === \"Object\";\n}\nfunction cloneObject(obj) {\n    logger4.info(\"cloning object:\", obj);\n    const enumerableProperties = Object.entries(obj).reduce((acc, [key, value])=>{\n        logger4.info(\"analyzing key-value pair:\", key, value);\n        acc[key] = isPlainObject(value) ? cloneObject(value) : value;\n        return acc;\n    }, {});\n    return isPlainObject(obj) ? enumerableProperties : Object.assign(Object.getPrototypeOf(obj), enumerableProperties);\n}\n// src/interceptors/ClientRequest/utils/normalizeClientRequestArgs.ts\nvar logger5 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_7__.Logger(\"http normalizeClientRequestArgs\");\nfunction resolveRequestOptions(args, url) {\n    if (typeof args[1] === \"undefined\" || typeof args[1] === \"function\") {\n        logger5.info(\"request options not provided, deriving from the url\", url);\n        return getRequestOptionsByUrl(url);\n    }\n    if (args[1]) {\n        logger5.info(\"has custom RequestOptions!\", args[1]);\n        const requestOptionsFromUrl = getRequestOptionsByUrl(url);\n        logger5.info(\"derived RequestOptions from the URL:\", requestOptionsFromUrl);\n        logger5.info(\"cloning RequestOptions...\");\n        const clonedRequestOptions = cloneObject(args[1]);\n        logger5.info(\"successfully cloned RequestOptions!\", clonedRequestOptions);\n        return {\n            ...requestOptionsFromUrl,\n            ...clonedRequestOptions\n        };\n    }\n    logger5.info(\"using an empty object as request options\");\n    return {};\n}\nfunction overrideUrlByRequestOptions(url, options) {\n    url.host = options.host || url.host;\n    url.hostname = options.hostname || url.hostname;\n    url.port = options.port ? options.port.toString() : url.port;\n    if (options.path) {\n        const parsedOptionsPath = (0,url__WEBPACK_IMPORTED_MODULE_9__.parse)(options.path, false);\n        url.pathname = parsedOptionsPath.pathname || \"\";\n        url.search = parsedOptionsPath.search || \"\";\n    }\n    return url;\n}\nfunction resolveCallback(args) {\n    return typeof args[1] === \"function\" ? args[1] : args[2];\n}\nfunction normalizeClientRequestArgs(defaultProtocol, ...args) {\n    let url;\n    let options;\n    let callback;\n    logger5.info(\"arguments\", args);\n    logger5.info(\"using default protocol:\", defaultProtocol);\n    if (args.length === 0) {\n        const url2 = new URL(\"http://localhost\");\n        const options2 = resolveRequestOptions(args, url2);\n        return [\n            url2,\n            options2\n        ];\n    }\n    if (typeof args[0] === \"string\") {\n        logger5.info(\"first argument is a location string:\", args[0]);\n        url = new URL(args[0]);\n        logger5.info(\"created a url:\", url);\n        const requestOptionsFromUrl = getRequestOptionsByUrl(url);\n        logger5.info(\"request options from url:\", requestOptionsFromUrl);\n        options = resolveRequestOptions(args, url);\n        logger5.info(\"resolved request options:\", options);\n        callback = resolveCallback(args);\n    } else if (args[0] instanceof URL) {\n        url = args[0];\n        logger5.info(\"first argument is a URL:\", url);\n        if (typeof args[1] !== \"undefined\" && isObject(args[1])) {\n            url = overrideUrlByRequestOptions(url, args[1]);\n        }\n        options = resolveRequestOptions(args, url);\n        logger5.info(\"derived request options:\", options);\n        callback = resolveCallback(args);\n    } else if (\"hash\" in args[0] && !(\"method\" in args[0])) {\n        const [legacyUrl] = args;\n        logger5.info(\"first argument is a legacy URL:\", legacyUrl);\n        if (legacyUrl.hostname === null) {\n            logger5.info(\"given legacy URL is relative (no hostname)\");\n            return isObject(args[1]) ? normalizeClientRequestArgs(defaultProtocol, {\n                path: legacyUrl.path,\n                ...args[1]\n            }, args[2]) : normalizeClientRequestArgs(defaultProtocol, {\n                path: legacyUrl.path\n            }, args[1]);\n        }\n        logger5.info(\"given legacy url is absolute\");\n        const resolvedUrl = new URL(legacyUrl.href);\n        return args[1] === void 0 ? normalizeClientRequestArgs(defaultProtocol, resolvedUrl) : typeof args[1] === \"function\" ? normalizeClientRequestArgs(defaultProtocol, resolvedUrl, args[1]) : normalizeClientRequestArgs(defaultProtocol, resolvedUrl, args[1], args[2]);\n    } else if (isObject(args[0])) {\n        options = args[0];\n        logger5.info(\"first argument is RequestOptions:\", options);\n        options.protocol = options.protocol || defaultProtocol;\n        logger5.info(\"normalized request options:\", options);\n        url = getUrlByRequestOptions(options);\n        logger5.info(\"created a URL from RequestOptions:\", url.href);\n        callback = resolveCallback(args);\n    } else {\n        throw new Error(`Failed to construct ClientRequest with these parameters: ${args}`);\n    }\n    options.protocol = options.protocol || url.protocol;\n    options.method = options.method || \"GET\";\n    if (typeof options.agent === \"undefined\") {\n        const agent = options.protocol === \"https:\" ? new https__WEBPACK_IMPORTED_MODULE_4__.Agent({\n            rejectUnauthorized: options.rejectUnauthorized\n        }) : new http__WEBPACK_IMPORTED_MODULE_3__.Agent();\n        options.agent = agent;\n        logger5.info(\"resolved fallback agent:\", agent);\n    }\n    if (!options._defaultAgent) {\n        logger5.info('has no default agent, setting the default agent for \"%s\"', options.protocol);\n        options._defaultAgent = options.protocol === \"https:\" ? https__WEBPACK_IMPORTED_MODULE_4__.globalAgent : http__WEBPACK_IMPORTED_MODULE_3__.globalAgent;\n    }\n    logger5.info(\"successfully resolved url:\", url.href);\n    logger5.info(\"successfully resolved options:\", options);\n    logger5.info(\"successfully resolved callback:\", callback);\n    return [\n        url,\n        options,\n        callback\n    ];\n}\n// src/interceptors/ClientRequest/http.get.ts\nfunction get(protocol, options) {\n    return function interceptorsHttpGet(...args) {\n        const clientRequestArgs = normalizeClientRequestArgs(`${protocol}:`, ...args);\n        const request2 = new NodeClientRequest(clientRequestArgs, options);\n        request2.end();\n        return request2;\n    };\n}\n// src/interceptors/ClientRequest/http.request.ts\n\nvar logger6 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_7__.Logger(\"http request\");\nfunction request(protocol, options) {\n    return function interceptorsHttpRequest(...args) {\n        logger6.info('request call (protocol \"%s\"):', protocol, args);\n        const clientRequestArgs = normalizeClientRequestArgs(`${protocol}:`, ...args);\n        return new NodeClientRequest(clientRequestArgs, options);\n    };\n}\n// src/interceptors/ClientRequest/index.ts\nvar _ClientRequestInterceptor = class extends _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_2__.Interceptor {\n    constructor(){\n        super(_ClientRequestInterceptor.interceptorSymbol);\n        this.modules = /* @__PURE__ */ new Map();\n        this.modules.set(\"http\", http__WEBPACK_IMPORTED_MODULE_3__);\n        this.modules.set(\"https\", https__WEBPACK_IMPORTED_MODULE_4__);\n    }\n    setup() {\n        const logger7 = this.logger.extend(\"setup\");\n        for (const [protocol, requestModule] of this.modules){\n            const { request: pureRequest, get: pureGet } = requestModule;\n            this.subscriptions.push(()=>{\n                requestModule.request = pureRequest;\n                requestModule.get = pureGet;\n                logger7.info('native \"%s\" module restored!', protocol);\n            });\n            const options = {\n                emitter: this.emitter,\n                logger: this.logger\n            };\n            requestModule.request = request(protocol, options);\n            requestModule.get = get(protocol, options);\n            logger7.info('native \"%s\" module patched!', protocol);\n        }\n    }\n};\nvar ClientRequestInterceptor = _ClientRequestInterceptor;\nClientRequestInterceptor.interceptorSymbol = Symbol(\"http\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-G5IEXC7T.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GFH37L5D.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-GFH37L5D.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_PATCHED_MODULE: () => (/* binding */ IS_PATCHED_MODULE)\n/* harmony export */ });\n// src/glossary.ts\nvar IS_PATCHED_MODULE = Symbol(\"isPatchedModule\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1HRkgzN0w1RC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGtCQUFrQjtBQUNsQixJQUFJQSxvQkFBb0JDLE9BQU87QUFJN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtbXN3Ly4vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvY2h1bmstR0ZIMzdMNUQubWpzPzQyMjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2dsb3NzYXJ5LnRzXG52YXIgSVNfUEFUQ0hFRF9NT0RVTEUgPSBTeW1ib2woXCJpc1BhdGNoZWRNb2R1bGVcIik7XG5cbmV4cG9ydCB7XG4gIElTX1BBVENIRURfTU9EVUxFXG59O1xuIl0sIm5hbWVzIjpbIklTX1BBVENIRURfTU9EVUxFIiwiU3ltYm9sIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GFH37L5D.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Interceptor: () => (/* binding */ Interceptor),\n/* harmony export */   InterceptorReadyState: () => (/* binding */ InterceptorReadyState),\n/* harmony export */   deleteGlobalSymbol: () => (/* binding */ deleteGlobalSymbol),\n/* harmony export */   getGlobalSymbol: () => (/* binding */ getGlobalSymbol)\n/* harmony export */ });\n/* harmony import */ var _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @open-draft/logger */ \"(rsc)/./node_modules/@open-draft/logger/lib/index.mjs\");\n/* harmony import */ var strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strict-event-emitter */ \"(rsc)/./node_modules/strict-event-emitter/lib/index.mjs\");\n// src/Interceptor.ts\n\n\nfunction getGlobalSymbol(symbol) {\n    return(// @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || void 0);\n}\nfunction setGlobalSymbol(symbol, value) {\n    globalThis[symbol] = value;\n}\nfunction deleteGlobalSymbol(symbol) {\n    delete globalThis[symbol];\n}\nvar InterceptorReadyState = /* @__PURE__ */ ((InterceptorReadyState2)=>{\n    InterceptorReadyState2[\"INACTIVE\"] = \"INACTIVE\";\n    InterceptorReadyState2[\"APPLYING\"] = \"APPLYING\";\n    InterceptorReadyState2[\"APPLIED\"] = \"APPLIED\";\n    InterceptorReadyState2[\"DISPOSING\"] = \"DISPOSING\";\n    InterceptorReadyState2[\"DISPOSED\"] = \"DISPOSED\";\n    return InterceptorReadyState2;\n})(InterceptorReadyState || {});\nvar Interceptor = class {\n    constructor(symbol){\n        this.symbol = symbol;\n        this.readyState = \"INACTIVE\" /* INACTIVE */ ;\n        this.emitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n        this.subscriptions = [];\n        this.logger = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(symbol.description);\n        this.emitter.setMaxListeners(0);\n        this.logger.info(\"constructing the interceptor...\");\n    }\n    /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */ checkEnvironment() {\n        return true;\n    }\n    /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */ apply() {\n        const logger = this.logger.extend(\"apply\");\n        logger.info(\"applying the interceptor...\");\n        if (this.readyState === \"APPLIED\" /* APPLIED */ ) {\n            logger.info(\"intercepted already applied!\");\n            return;\n        }\n        const shouldApply = this.checkEnvironment();\n        if (!shouldApply) {\n            logger.info(\"the interceptor cannot be applied in this environment!\");\n            return;\n        }\n        this.readyState = \"APPLYING\" /* APPLYING */ ;\n        const runningInstance = this.getInstance();\n        if (runningInstance) {\n            logger.info(\"found a running instance, reusing...\");\n            this.on = (event, listener)=>{\n                logger.info('proxying the \"%s\" listener', event);\n                runningInstance.emitter.addListener(event, listener);\n                this.subscriptions.push(()=>{\n                    runningInstance.emitter.removeListener(event, listener);\n                    logger.info('removed proxied \"%s\" listener!', event);\n                });\n                return this;\n            };\n            this.readyState = \"APPLIED\" /* APPLIED */ ;\n            return;\n        }\n        logger.info(\"no running instance found, setting up a new instance...\");\n        this.setup();\n        this.setInstance();\n        this.readyState = \"APPLIED\" /* APPLIED */ ;\n    }\n    /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */ setup() {}\n    /**\n   * Listen to the interceptor's public events.\n   */ on(event, listener) {\n        const logger = this.logger.extend(\"on\");\n        if (this.readyState === \"DISPOSING\" /* DISPOSING */  || this.readyState === \"DISPOSED\" /* DISPOSED */ ) {\n            logger.info(\"cannot listen to events, already disposed!\");\n            return this;\n        }\n        logger.info('adding \"%s\" event listener:', event, listener.name);\n        this.emitter.on(event, listener);\n        return this;\n    }\n    once(event, listener) {\n        this.emitter.once(event, listener);\n        return this;\n    }\n    off(event, listener) {\n        this.emitter.off(event, listener);\n        return this;\n    }\n    removeAllListeners(event) {\n        this.emitter.removeAllListeners(event);\n        return this;\n    }\n    /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */ dispose() {\n        const logger = this.logger.extend(\"dispose\");\n        if (this.readyState === \"DISPOSED\" /* DISPOSED */ ) {\n            logger.info(\"cannot dispose, already disposed!\");\n            return;\n        }\n        logger.info(\"disposing the interceptor...\");\n        this.readyState = \"DISPOSING\" /* DISPOSING */ ;\n        if (!this.getInstance()) {\n            logger.info(\"no interceptors running, skipping dispose...\");\n            return;\n        }\n        this.clearInstance();\n        logger.info(\"global symbol deleted:\", getGlobalSymbol(this.symbol));\n        if (this.subscriptions.length > 0) {\n            logger.info(\"disposing of %d subscriptions...\", this.subscriptions.length);\n            for (const dispose of this.subscriptions){\n                dispose();\n            }\n            this.subscriptions = [];\n            logger.info(\"disposed of all subscriptions!\", this.subscriptions.length);\n        }\n        this.emitter.removeAllListeners();\n        logger.info(\"destroyed the listener!\");\n        this.readyState = \"DISPOSED\" /* DISPOSED */ ;\n    }\n    getInstance() {\n        var _a;\n        const instance = getGlobalSymbol(this.symbol);\n        this.logger.info(\"retrieved global instance:\", (_a = instance == null ? void 0 : instance.constructor) == null ? void 0 : _a.name);\n        return instance;\n    }\n    setInstance() {\n        setGlobalSymbol(this.symbol, this);\n        this.logger.info(\"set global instance!\", this.symbol.description);\n    }\n    clearInstance() {\n        deleteGlobalSymbol(this.symbol);\n        this.logger.info(\"cleared global instance!\", this.symbol.description);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-UBEFEZXT.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-UBEFEZXT.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchInterceptor: () => (/* binding */ BatchInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-GM3YBSM3.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\");\n\n// src/BatchInterceptor.ts\nvar BatchInterceptor = class extends _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_0__.Interceptor {\n    constructor(options){\n        BatchInterceptor.symbol = Symbol(options.name);\n        super(BatchInterceptor.symbol);\n        this.interceptors = options.interceptors;\n    }\n    setup() {\n        const logger = this.logger.extend(\"setup\");\n        logger.info(\"applying all %d interceptors...\", this.interceptors.length);\n        for (const interceptor of this.interceptors){\n            logger.info('applying \"%s\" interceptor...', interceptor.constructor.name);\n            interceptor.apply();\n            logger.info(\"adding interceptor dispose subscription\");\n            this.subscriptions.push(()=>interceptor.dispose());\n        }\n    }\n    on(event, listener) {\n        for (const interceptor of this.interceptors){\n            interceptor.on(event, listener);\n        }\n        return this;\n    }\n    once(event, listener) {\n        for (const interceptor of this.interceptors){\n            interceptor.once(event, listener);\n        }\n        return this;\n    }\n    off(event, listener) {\n        for (const interceptor of this.interceptors){\n            interceptor.off(event, listener);\n        }\n        return this;\n    }\n    removeAllListeners(event) {\n        for (const interceptors of this.interceptors){\n            interceptors.removeAllListeners(event);\n        }\n        return this;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1VQkVGRVpYVC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFOEI7QUFFOUIsMEJBQTBCO0FBQzFCLElBQUlDLG1CQUFtQixjQUFjRCw0REFBV0E7SUFDOUNFLFlBQVlDLE9BQU8sQ0FBRTtRQUNuQkYsaUJBQWlCRyxNQUFNLEdBQUdDLE9BQU9GLFFBQVFHLElBQUk7UUFDN0MsS0FBSyxDQUFDTCxpQkFBaUJHLE1BQU07UUFDN0IsSUFBSSxDQUFDRyxZQUFZLEdBQUdKLFFBQVFJLFlBQVk7SUFDMUM7SUFDQUMsUUFBUTtRQUNOLE1BQU1DLFNBQVMsSUFBSSxDQUFDQSxNQUFNLENBQUNDLE1BQU0sQ0FBQztRQUNsQ0QsT0FBT0UsSUFBSSxDQUFDLG1DQUFtQyxJQUFJLENBQUNKLFlBQVksQ0FBQ0ssTUFBTTtRQUN2RSxLQUFLLE1BQU1DLGVBQWUsSUFBSSxDQUFDTixZQUFZLENBQUU7WUFDM0NFLE9BQU9FLElBQUksQ0FBQyxnQ0FBZ0NFLFlBQVlYLFdBQVcsQ0FBQ0ksSUFBSTtZQUN4RU8sWUFBWUMsS0FBSztZQUNqQkwsT0FBT0UsSUFBSSxDQUFDO1lBQ1osSUFBSSxDQUFDSSxhQUFhLENBQUNDLElBQUksQ0FBQyxJQUFNSCxZQUFZSSxPQUFPO1FBQ25EO0lBQ0Y7SUFDQUMsR0FBR0MsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDbEIsS0FBSyxNQUFNUCxlQUFlLElBQUksQ0FBQ04sWUFBWSxDQUFFO1lBQzNDTSxZQUFZSyxFQUFFLENBQUNDLE9BQU9DO1FBQ3hCO1FBQ0EsT0FBTyxJQUFJO0lBQ2I7SUFDQUMsS0FBS0YsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDcEIsS0FBSyxNQUFNUCxlQUFlLElBQUksQ0FBQ04sWUFBWSxDQUFFO1lBQzNDTSxZQUFZUSxJQUFJLENBQUNGLE9BQU9DO1FBQzFCO1FBQ0EsT0FBTyxJQUFJO0lBQ2I7SUFDQUUsSUFBSUgsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDbkIsS0FBSyxNQUFNUCxlQUFlLElBQUksQ0FBQ04sWUFBWSxDQUFFO1lBQzNDTSxZQUFZUyxHQUFHLENBQUNILE9BQU9DO1FBQ3pCO1FBQ0EsT0FBTyxJQUFJO0lBQ2I7SUFDQUcsbUJBQW1CSixLQUFLLEVBQUU7UUFDeEIsS0FBSyxNQUFNWixnQkFBZ0IsSUFBSSxDQUFDQSxZQUFZLENBQUU7WUFDNUNBLGFBQWFnQixrQkFBa0IsQ0FBQ0o7UUFDbEM7UUFDQSxPQUFPLElBQUk7SUFDYjtBQUNGO0FBSUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtbXN3Ly4vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvY2h1bmstVUJFRkVaWFQubWpzPzgwODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW50ZXJjZXB0b3Jcbn0gZnJvbSBcIi4vY2h1bmstR00zWUJTTTMubWpzXCI7XG5cbi8vIHNyYy9CYXRjaEludGVyY2VwdG9yLnRzXG52YXIgQmF0Y2hJbnRlcmNlcHRvciA9IGNsYXNzIGV4dGVuZHMgSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgQmF0Y2hJbnRlcmNlcHRvci5zeW1ib2wgPSBTeW1ib2wob3B0aW9ucy5uYW1lKTtcbiAgICBzdXBlcihCYXRjaEludGVyY2VwdG9yLnN5bWJvbCk7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSBvcHRpb25zLmludGVyY2VwdG9ycztcbiAgfVxuICBzZXR1cCgpIHtcbiAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5leHRlbmQoXCJzZXR1cFwiKTtcbiAgICBsb2dnZXIuaW5mbyhcImFwcGx5aW5nIGFsbCAlZCBpbnRlcmNlcHRvcnMuLi5cIiwgdGhpcy5pbnRlcmNlcHRvcnMubGVuZ3RoKTtcbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBsb2dnZXIuaW5mbygnYXBwbHlpbmcgXCIlc1wiIGludGVyY2VwdG9yLi4uJywgaW50ZXJjZXB0b3IuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICBpbnRlcmNlcHRvci5hcHBseSgpO1xuICAgICAgbG9nZ2VyLmluZm8oXCJhZGRpbmcgaW50ZXJjZXB0b3IgZGlzcG9zZSBzdWJzY3JpcHRpb25cIik7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiBpbnRlcmNlcHRvci5kaXNwb3NlKCkpO1xuICAgIH1cbiAgfVxuICBvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBpbnRlcmNlcHRvci5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGludGVyY2VwdG9yLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGludGVyY2VwdG9yLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9ycyBvZiB0aGlzLmludGVyY2VwdG9ycykge1xuICAgICAgaW50ZXJjZXB0b3JzLnJlbW92ZUFsbExpc3RlbmVycyhldmVudCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBCYXRjaEludGVyY2VwdG9yXG59O1xuIl0sIm5hbWVzIjpbIkludGVyY2VwdG9yIiwiQmF0Y2hJbnRlcmNlcHRvciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInN5bWJvbCIsIlN5bWJvbCIsIm5hbWUiLCJpbnRlcmNlcHRvcnMiLCJzZXR1cCIsImxvZ2dlciIsImV4dGVuZCIsImluZm8iLCJsZW5ndGgiLCJpbnRlcmNlcHRvciIsImFwcGx5Iiwic3Vic2NyaXB0aW9ucyIsInB1c2giLCJkaXNwb3NlIiwib24iLCJldmVudCIsImxpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-UBEFEZXT.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   emitAsync: () => (/* binding */ emitAsync),\n/* harmony export */   toInteractiveRequest: () => (/* binding */ toInteractiveRequest),\n/* harmony export */   uuidv4: () => (/* binding */ uuidv4)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(rsc)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n// src/utils/RequestController.ts\n\n\nvar RequestController = class {\n    constructor(request){\n        this.request = request;\n        this.responsePromise = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_1__.DeferredPromise();\n    }\n    respondWith(response) {\n        (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(this.responsePromise.state === \"pending\", 'Failed to respond to \"%s %s\" request: the \"request\" event has already been responded to.', this.request.method, this.request.url);\n        this.responsePromise.resolve(response);\n    }\n};\n// src/utils/toInteractiveRequest.ts\nfunction toInteractiveRequest(request) {\n    const requestController = new RequestController(request);\n    Reflect.set(request, \"respondWith\", requestController.respondWith.bind(requestController));\n    return {\n        interactiveRequest: request,\n        requestController\n    };\n}\n// src/utils/uuid.ts\nfunction uuidv4() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c == \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n    });\n}\n// src/utils/emitAsync.ts\nasync function emitAsync(emitter, eventName, ...data) {\n    const listners = emitter.listeners(eventName);\n    if (listners.length === 0) {\n        return;\n    }\n    for (const listener of listners){\n        await listener.apply(emitter, data);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1ZUUdUTU1PWi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxpQ0FBaUM7QUFDTTtBQUN3QjtBQUMvRCxJQUFJRSxvQkFBb0I7SUFDdEJDLFlBQVlDLE9BQU8sQ0FBRTtRQUNuQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLGVBQWUsR0FBRyxJQUFJSix5RUFBZUE7SUFDNUM7SUFDQUssWUFBWUMsUUFBUSxFQUFFO1FBQ3BCUCxxREFBU0EsQ0FDUCxJQUFJLENBQUNLLGVBQWUsQ0FBQ0csS0FBSyxLQUFLLFdBQy9CLDRGQUNBLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxNQUFNLEVBQ25CLElBQUksQ0FBQ0wsT0FBTyxDQUFDTSxHQUFHO1FBRWxCLElBQUksQ0FBQ0wsZUFBZSxDQUFDTSxPQUFPLENBQUNKO0lBQy9CO0FBQ0Y7QUFFQSxvQ0FBb0M7QUFDcEMsU0FBU0sscUJBQXFCUixPQUFPO0lBQ25DLE1BQU1TLG9CQUFvQixJQUFJWCxrQkFBa0JFO0lBQ2hEVSxRQUFRQyxHQUFHLENBQ1RYLFNBQ0EsZUFDQVMsa0JBQWtCUCxXQUFXLENBQUNVLElBQUksQ0FBQ0g7SUFFckMsT0FBTztRQUNMSSxvQkFBb0JiO1FBQ3BCUztJQUNGO0FBQ0Y7QUFFQSxvQkFBb0I7QUFDcEIsU0FBU0s7SUFDUCxPQUFPLHVDQUF1Q0MsT0FBTyxDQUFDLFNBQVMsU0FBU0MsQ0FBQztRQUN2RSxNQUFNQyxJQUFJQyxLQUFLQyxNQUFNLEtBQUssS0FBSztRQUMvQixNQUFNQyxJQUFJSixLQUFLLE1BQU1DLElBQUlBLElBQUksSUFBSTtRQUNqQyxPQUFPRyxFQUFFQyxRQUFRLENBQUM7SUFDcEI7QUFDRjtBQUVBLHlCQUF5QjtBQUN6QixlQUFlQyxVQUFVQyxPQUFPLEVBQUVDLFNBQVMsRUFBRSxHQUFHQyxJQUFJO0lBQ2xELE1BQU1DLFdBQVdILFFBQVFJLFNBQVMsQ0FBQ0g7SUFDbkMsSUFBSUUsU0FBU0UsTUFBTSxLQUFLLEdBQUc7UUFDekI7SUFDRjtJQUNBLEtBQUssTUFBTUMsWUFBWUgsU0FBVTtRQUMvQixNQUFNRyxTQUFTQyxLQUFLLENBQUNQLFNBQVNFO0lBQ2hDO0FBQ0Y7QUFNRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1tc3cvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1ZUUdUTU1PWi5tanM/OGUyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvUmVxdWVzdENvbnRyb2xsZXIudHNcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJvdXR2YXJpYW50XCI7XG5pbXBvcnQgeyBEZWZlcnJlZFByb21pc2UgfSBmcm9tIFwiQG9wZW4tZHJhZnQvZGVmZXJyZWQtcHJvbWlzZVwiO1xudmFyIFJlcXVlc3RDb250cm9sbGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB0aGlzLnJlc3BvbnNlUHJvbWlzZSA9IG5ldyBEZWZlcnJlZFByb21pc2UoKTtcbiAgfVxuICByZXNwb25kV2l0aChyZXNwb25zZSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMucmVzcG9uc2VQcm9taXNlLnN0YXRlID09PSBcInBlbmRpbmdcIixcbiAgICAgICdGYWlsZWQgdG8gcmVzcG9uZCB0byBcIiVzICVzXCIgcmVxdWVzdDogdGhlIFwicmVxdWVzdFwiIGV2ZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVzcG9uZGVkIHRvLicsXG4gICAgICB0aGlzLnJlcXVlc3QubWV0aG9kLFxuICAgICAgdGhpcy5yZXF1ZXN0LnVybFxuICAgICk7XG4gICAgdGhpcy5yZXNwb25zZVByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy90b0ludGVyYWN0aXZlUmVxdWVzdC50c1xuZnVuY3Rpb24gdG9JbnRlcmFjdGl2ZVJlcXVlc3QocmVxdWVzdCkge1xuICBjb25zdCByZXF1ZXN0Q29udHJvbGxlciA9IG5ldyBSZXF1ZXN0Q29udHJvbGxlcihyZXF1ZXN0KTtcbiAgUmVmbGVjdC5zZXQoXG4gICAgcmVxdWVzdCxcbiAgICBcInJlc3BvbmRXaXRoXCIsXG4gICAgcmVxdWVzdENvbnRyb2xsZXIucmVzcG9uZFdpdGguYmluZChyZXF1ZXN0Q29udHJvbGxlcilcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBpbnRlcmFjdGl2ZVJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgcmVxdWVzdENvbnRyb2xsZXJcbiAgfTtcbn1cblxuLy8gc3JjL3V0aWxzL3V1aWQudHNcbmZ1bmN0aW9uIHV1aWR2NCgpIHtcbiAgcmV0dXJuIFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDA7XG4gICAgY29uc3QgdiA9IGMgPT0gXCJ4XCIgPyByIDogciAmIDMgfCA4O1xuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59XG5cbi8vIHNyYy91dGlscy9lbWl0QXN5bmMudHNcbmFzeW5jIGZ1bmN0aW9uIGVtaXRBc3luYyhlbWl0dGVyLCBldmVudE5hbWUsIC4uLmRhdGEpIHtcbiAgY29uc3QgbGlzdG5lcnMgPSBlbWl0dGVyLmxpc3RlbmVycyhldmVudE5hbWUpO1xuICBpZiAobGlzdG5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdG5lcnMpIHtcbiAgICBhd2FpdCBsaXN0ZW5lci5hcHBseShlbWl0dGVyLCBkYXRhKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICB0b0ludGVyYWN0aXZlUmVxdWVzdCxcbiAgdXVpZHY0LFxuICBlbWl0QXN5bmNcbn07XG4iXSwibmFtZXMiOlsiaW52YXJpYW50IiwiRGVmZXJyZWRQcm9taXNlIiwiUmVxdWVzdENvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsInJlcXVlc3QiLCJyZXNwb25zZVByb21pc2UiLCJyZXNwb25kV2l0aCIsInJlc3BvbnNlIiwic3RhdGUiLCJtZXRob2QiLCJ1cmwiLCJyZXNvbHZlIiwidG9JbnRlcmFjdGl2ZVJlcXVlc3QiLCJyZXF1ZXN0Q29udHJvbGxlciIsIlJlZmxlY3QiLCJzZXQiLCJiaW5kIiwiaW50ZXJhY3RpdmVSZXF1ZXN0IiwidXVpZHY0IiwicmVwbGFjZSIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyIsImVtaXRBc3luYyIsImVtaXR0ZXIiLCJldmVudE5hbWUiLCJkYXRhIiwibGlzdG5lcnMiLCJsaXN0ZW5lcnMiLCJsZW5ndGgiLCJsaXN0ZW5lciIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchInterceptor: () => (/* reexport safe */ _chunk_UBEFEZXT_mjs__WEBPACK_IMPORTED_MODULE_0__.BatchInterceptor),\n/* harmony export */   IS_PATCHED_MODULE: () => (/* reexport safe */ _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE),\n/* harmony export */   Interceptor: () => (/* reexport safe */ _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_3__.Interceptor),\n/* harmony export */   InterceptorReadyState: () => (/* reexport safe */ _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_3__.InterceptorReadyState),\n/* harmony export */   decodeBuffer: () => (/* reexport safe */ _chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeBuffer),\n/* harmony export */   deleteGlobalSymbol: () => (/* reexport safe */ _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_3__.deleteGlobalSymbol),\n/* harmony export */   encodeBuffer: () => (/* reexport safe */ _chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_1__.encodeBuffer),\n/* harmony export */   getCleanUrl: () => (/* binding */ getCleanUrl),\n/* harmony export */   getGlobalSymbol: () => (/* reexport safe */ _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_3__.getGlobalSymbol)\n/* harmony export */ });\n/* harmony import */ var _chunk_UBEFEZXT_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-UBEFEZXT.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-UBEFEZXT.mjs\");\n/* harmony import */ var _chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-7II4SWKS.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-7II4SWKS.mjs\");\n/* harmony import */ var _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-GFH37L5D.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GFH37L5D.mjs\");\n/* harmony import */ var _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-GM3YBSM3.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\");\n\n\n\n\n// src/utils/getCleanUrl.ts\nfunction getCleanUrl(url, isAbsolute = true) {\n    return [\n        isAbsolute && url.origin,\n        url.pathname\n    ].filter(Boolean).join(\"\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUU4QjtBQUlBO0FBR0E7QUFNQTtBQUU5QiwyQkFBMkI7QUFDM0IsU0FBU1EsWUFBWUMsR0FBRyxFQUFFQyxhQUFhLElBQUk7SUFDekMsT0FBTztRQUFDQSxjQUFjRCxJQUFJRSxNQUFNO1FBQUVGLElBQUlHLFFBQVE7S0FBQyxDQUFDQyxNQUFNLENBQUNDLFNBQVNDLElBQUksQ0FBQztBQUN2RTtBQVdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLW1zdy8uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2luZGV4Lm1qcz9iZTkxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhdGNoSW50ZXJjZXB0b3Jcbn0gZnJvbSBcIi4vY2h1bmstVUJFRkVaWFQubWpzXCI7XG5pbXBvcnQge1xuICBkZWNvZGVCdWZmZXIsXG4gIGVuY29kZUJ1ZmZlclxufSBmcm9tIFwiLi9jaHVuay03SUk0U1dLUy5tanNcIjtcbmltcG9ydCB7XG4gIElTX1BBVENIRURfTU9EVUxFXG59IGZyb20gXCIuL2NodW5rLUdGSDM3TDVELm1qc1wiO1xuaW1wb3J0IHtcbiAgSW50ZXJjZXB0b3IsXG4gIEludGVyY2VwdG9yUmVhZHlTdGF0ZSxcbiAgZGVsZXRlR2xvYmFsU3ltYm9sLFxuICBnZXRHbG9iYWxTeW1ib2xcbn0gZnJvbSBcIi4vY2h1bmstR00zWUJTTTMubWpzXCI7XG5cbi8vIHNyYy91dGlscy9nZXRDbGVhblVybC50c1xuZnVuY3Rpb24gZ2V0Q2xlYW5VcmwodXJsLCBpc0Fic29sdXRlID0gdHJ1ZSkge1xuICByZXR1cm4gW2lzQWJzb2x1dGUgJiYgdXJsLm9yaWdpbiwgdXJsLnBhdGhuYW1lXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIlwiKTtcbn1cbmV4cG9ydCB7XG4gIEJhdGNoSW50ZXJjZXB0b3IsXG4gIElTX1BBVENIRURfTU9EVUxFLFxuICBJbnRlcmNlcHRvcixcbiAgSW50ZXJjZXB0b3JSZWFkeVN0YXRlLFxuICBkZWNvZGVCdWZmZXIsXG4gIGRlbGV0ZUdsb2JhbFN5bWJvbCxcbiAgZW5jb2RlQnVmZmVyLFxuICBnZXRDbGVhblVybCxcbiAgZ2V0R2xvYmFsU3ltYm9sXG59O1xuIl0sIm5hbWVzIjpbIkJhdGNoSW50ZXJjZXB0b3IiLCJkZWNvZGVCdWZmZXIiLCJlbmNvZGVCdWZmZXIiLCJJU19QQVRDSEVEX01PRFVMRSIsIkludGVyY2VwdG9yIiwiSW50ZXJjZXB0b3JSZWFkeVN0YXRlIiwiZGVsZXRlR2xvYmFsU3ltYm9sIiwiZ2V0R2xvYmFsU3ltYm9sIiwiZ2V0Q2xlYW5VcmwiLCJ1cmwiLCJpc0Fic29sdXRlIiwib3JpZ2luIiwicGF0aG5hbWUiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientRequestInterceptor: () => (/* reexport safe */ _chunk_G5IEXC7T_mjs__WEBPACK_IMPORTED_MODULE_0__.ClientRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_G5IEXC7T_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-G5IEXC7T.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-G5IEXC7T.mjs\");\n/* harmony import */ var _chunk_3IYIKC3X_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-3IYIKC3X.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-3IYIKC3X.mjs\");\n/* harmony import */ var _chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-YQGTMMOZ.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs\");\n/* harmony import */ var _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chunk-GM3YBSM3.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvQ2xpZW50UmVxdWVzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFa0M7QUFDQTtBQUNBO0FBQ0E7QUFHaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtbXN3Ly4vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvaW50ZXJjZXB0b3JzL0NsaWVudFJlcXVlc3QvaW5kZXgubWpzP2JlMWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2xpZW50UmVxdWVzdEludGVyY2VwdG9yXG59IGZyb20gXCIuLi8uLi9jaHVuay1HNUlFWEM3VC5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLTNJWUlLQzNYLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstWVFHVE1NT1oubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay1HTTNZQlNNMy5tanNcIjtcbmV4cG9ydCB7XG4gIENsaWVudFJlcXVlc3RJbnRlcmNlcHRvclxufTtcbiJdLCJuYW1lcyI6WyJDbGllbnRSZXF1ZXN0SW50ZXJjZXB0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLHttpRequestInterceptor: () => (/* reexport safe */ _chunk_FB53TMYN_mjs__WEBPACK_IMPORTED_MODULE_0__.XMLHttpRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_FB53TMYN_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-FB53TMYN.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-FB53TMYN.mjs\");\n/* harmony import */ var _chunk_7II4SWKS_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-7II4SWKS.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-7II4SWKS.mjs\");\n/* harmony import */ var _chunk_3IYIKC3X_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-3IYIKC3X.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-3IYIKC3X.mjs\");\n/* harmony import */ var _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chunk-GFH37L5D.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GFH37L5D.mjs\");\n/* harmony import */ var _chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../chunk-YQGTMMOZ.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs\");\n/* harmony import */ var _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../chunk-GM3YBSM3.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\");\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvWE1MSHR0cFJlcXVlc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFa0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLW1zdy8uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2ludGVyY2VwdG9ycy9YTUxIdHRwUmVxdWVzdC9pbmRleC5tanM/ZjM3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBYTUxIdHRwUmVxdWVzdEludGVyY2VwdG9yXG59IGZyb20gXCIuLi8uLi9jaHVuay1GQjUzVE1ZTi5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLTdJSTRTV0tTLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstM0lZSUtDM1gubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay1HRkgzN0w1RC5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLVlRR1RNTU9aLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstR00zWUJTTTMubWpzXCI7XG5leHBvcnQge1xuICBYTUxIdHRwUmVxdWVzdEludGVyY2VwdG9yXG59O1xuIl0sIm5hbWVzIjpbIlhNTEh0dHBSZXF1ZXN0SW50ZXJjZXB0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchInterceptor: () => (/* binding */ FetchInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-GFH37L5D.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GFH37L5D.mjs\");\n/* harmony import */ var _chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-YQGTMMOZ.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-YQGTMMOZ.mjs\");\n/* harmony import */ var _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-GM3YBSM3.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-GM3YBSM3.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(rsc)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @open-draft/until */ \"(rsc)/./node_modules/@open-draft/until/lib/index.mjs\");\n\n\n\n// src/interceptors/fetch/index.ts\n\n\n\nvar _FetchInterceptor = class extends _chunk_GM3YBSM3_mjs__WEBPACK_IMPORTED_MODULE_2__.Interceptor {\n    constructor(){\n        super(_FetchInterceptor.symbol);\n    }\n    checkEnvironment() {\n        return typeof globalThis !== \"undefined\" && typeof globalThis.fetch !== \"undefined\";\n    }\n    setup() {\n        const pureFetch = globalThis.fetch;\n        (0,outvariant__WEBPACK_IMPORTED_MODULE_3__.invariant)(!pureFetch[_chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_0__.IS_PATCHED_MODULE], 'Failed to patch the \"fetch\" module: already patched.');\n        globalThis.fetch = async (input, init)=>{\n            var _a;\n            const requestId = (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__.uuidv4)();\n            const request = new Request(input, init);\n            this.logger.info(\"[%s] %s\", request.method, request.url);\n            const { interactiveRequest, requestController } = (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__.toInteractiveRequest)(request);\n            this.logger.info('emitting the \"request\" event for %d listener(s)...', this.emitter.listenerCount(\"request\"));\n            this.emitter.once(\"request\", ({ requestId: pendingRequestId })=>{\n                if (pendingRequestId !== requestId) {\n                    return;\n                }\n                if (requestController.responsePromise.state === \"pending\") {\n                    requestController.responsePromise.resolve(void 0);\n                }\n            });\n            this.logger.info(\"awaiting for the mocked response...\");\n            const signal = interactiveRequest.signal;\n            const requestAborted = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_4__.DeferredPromise();\n            signal.addEventListener(\"abort\", ()=>{\n                requestAborted.reject(signal.reason);\n            }, {\n                once: true\n            });\n            const resolverResult = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_5__.until)(async ()=>{\n                const listenersFinished = (0,_chunk_YQGTMMOZ_mjs__WEBPACK_IMPORTED_MODULE_1__.emitAsync)(this.emitter, \"request\", {\n                    request: interactiveRequest,\n                    requestId\n                });\n                await Promise.race([\n                    requestAborted,\n                    // Put the listeners invocation Promise in the same race condition\n                    // with the request abort Promise because otherwise awaiting the listeners\n                    // would always yield some response (or undefined).\n                    listenersFinished,\n                    requestController.responsePromise\n                ]);\n                this.logger.info(\"all request listeners have been resolved!\");\n                const mockedResponse2 = await requestController.responsePromise;\n                this.logger.info(\"event.respondWith called with:\", mockedResponse2);\n                return mockedResponse2;\n            });\n            if (requestAborted.state === \"rejected\") {\n                return Promise.reject(requestAborted.rejectionReason);\n            }\n            if (resolverResult.error) {\n                return Promise.reject(createNetworkError(resolverResult.error));\n            }\n            const mockedResponse = resolverResult.data;\n            if (mockedResponse && !((_a = request.signal) == null ? void 0 : _a.aborted)) {\n                this.logger.info(\"received mocked response:\", mockedResponse);\n                if (mockedResponse.type === \"error\") {\n                    this.logger.info(\"received a network error response, rejecting the request promise...\");\n                    return Promise.reject(createNetworkError(mockedResponse));\n                }\n                const responseClone = mockedResponse.clone();\n                this.emitter.emit(\"response\", {\n                    response: responseClone,\n                    isMockedResponse: true,\n                    request: interactiveRequest,\n                    requestId\n                });\n                const response = new Response(mockedResponse.body, mockedResponse);\n                Object.defineProperty(response, \"url\", {\n                    writable: false,\n                    enumerable: true,\n                    configurable: false,\n                    value: request.url\n                });\n                return response;\n            }\n            this.logger.info(\"no mocked response received!\");\n            return pureFetch(request).then((response)=>{\n                const responseClone = response.clone();\n                this.logger.info(\"original fetch performed\", responseClone);\n                this.emitter.emit(\"response\", {\n                    response: responseClone,\n                    isMockedResponse: false,\n                    request: interactiveRequest,\n                    requestId\n                });\n                return response;\n            });\n        };\n        Object.defineProperty(globalThis.fetch, _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_0__.IS_PATCHED_MODULE, {\n            enumerable: true,\n            configurable: true,\n            value: true\n        });\n        this.subscriptions.push(()=>{\n            Object.defineProperty(globalThis.fetch, _chunk_GFH37L5D_mjs__WEBPACK_IMPORTED_MODULE_0__.IS_PATCHED_MODULE, {\n                value: void 0\n            });\n            globalThis.fetch = pureFetch;\n            this.logger.info('restored native \"globalThis.fetch\"!', globalThis.fetch.name);\n        });\n    }\n};\nvar FetchInterceptor = _FetchInterceptor;\nFetchInterceptor.symbol = Symbol(\"fetch\");\nfunction createNetworkError(cause) {\n    return Object.assign(new TypeError(\"Failed to fetch\"), {\n        cause\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs\n");

/***/ })

};
;