"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/headers-polyfill";
exports.ids = ["vendor-chunks/headers-polyfill"];
exports.modules = {

/***/ "(rsc)/./node_modules/headers-polyfill/lib/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/headers-polyfill/lib/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   flattenHeadersList: () => (/* binding */ flattenHeadersList),\n/* harmony export */   flattenHeadersObject: () => (/* binding */ flattenHeadersObject),\n/* harmony export */   getRawHeaders: () => (/* binding */ getRawHeaders),\n/* harmony export */   headersToList: () => (/* binding */ headersToList),\n/* harmony export */   headersToObject: () => (/* binding */ headersToObject),\n/* harmony export */   headersToString: () => (/* binding */ headersToString),\n/* harmony export */   listToHeaders: () => (/* binding */ listToHeaders),\n/* harmony export */   objectToHeaders: () => (/* binding */ objectToHeaders),\n/* harmony export */   reduceHeadersObject: () => (/* binding */ reduceHeadersObject),\n/* harmony export */   stringToHeaders: () => (/* binding */ stringToHeaders)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n    \"node_modules/set-cookie-parser/lib/set-cookie.js\" (exports, module) {\n        \"use strict\";\n        var defaultParseOptions = {\n            decodeValues: true,\n            map: false,\n            silent: false\n        };\n        function isNonEmptyString(str) {\n            return typeof str === \"string\" && !!str.trim();\n        }\n        function parseString(setCookieValue, options) {\n            var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n            var nameValuePairStr = parts.shift();\n            var parsed = parseNameValuePair(nameValuePairStr);\n            var name = parsed.name;\n            var value = parsed.value;\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            try {\n                value = options.decodeValues ? decodeURIComponent(value) : value;\n            } catch (e) {\n                console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n            }\n            var cookie = {\n                name,\n                value\n            };\n            parts.forEach(function(part) {\n                var sides = part.split(\"=\");\n                var key = sides.shift().trimLeft().toLowerCase();\n                var value2 = sides.join(\"=\");\n                if (key === \"expires\") {\n                    cookie.expires = new Date(value2);\n                } else if (key === \"max-age\") {\n                    cookie.maxAge = parseInt(value2, 10);\n                } else if (key === \"secure\") {\n                    cookie.secure = true;\n                } else if (key === \"httponly\") {\n                    cookie.httpOnly = true;\n                } else if (key === \"samesite\") {\n                    cookie.sameSite = value2;\n                } else {\n                    cookie[key] = value2;\n                }\n            });\n            return cookie;\n        }\n        function parseNameValuePair(nameValuePairStr) {\n            var name = \"\";\n            var value = \"\";\n            var nameValueArr = nameValuePairStr.split(\"=\");\n            if (nameValueArr.length > 1) {\n                name = nameValueArr.shift();\n                value = nameValueArr.join(\"=\");\n            } else {\n                value = nameValuePairStr;\n            }\n            return {\n                name,\n                value\n            };\n        }\n        function parse(input, options) {\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            if (!input) {\n                if (!options.map) {\n                    return [];\n                } else {\n                    return {};\n                }\n            }\n            if (input.headers) {\n                if (typeof input.headers.getSetCookie === \"function\") {\n                    input = input.headers.getSetCookie();\n                } else if (input.headers[\"set-cookie\"]) {\n                    input = input.headers[\"set-cookie\"];\n                } else {\n                    var sch = input.headers[Object.keys(input.headers).find(function(key) {\n                        return key.toLowerCase() === \"set-cookie\";\n                    })];\n                    if (!sch && input.headers.cookie && !options.silent) {\n                        console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n                    }\n                    input = sch;\n                }\n            }\n            if (!Array.isArray(input)) {\n                input = [\n                    input\n                ];\n            }\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            if (!options.map) {\n                return input.filter(isNonEmptyString).map(function(str) {\n                    return parseString(str, options);\n                });\n            } else {\n                var cookies = {};\n                return input.filter(isNonEmptyString).reduce(function(cookies2, str) {\n                    var cookie = parseString(str, options);\n                    cookies2[cookie.name] = cookie;\n                    return cookies2;\n                }, cookies);\n            }\n        }\n        function splitCookiesString2(cookiesString) {\n            if (Array.isArray(cookiesString)) {\n                return cookiesString;\n            }\n            if (typeof cookiesString !== \"string\") {\n                return [];\n            }\n            var cookiesStrings = [];\n            var pos = 0;\n            var start;\n            var ch;\n            var lastComma;\n            var nextStart;\n            var cookiesSeparatorFound;\n            function skipWhitespace() {\n                while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n                    pos += 1;\n                }\n                return pos < cookiesString.length;\n            }\n            function notSpecialChar() {\n                ch = cookiesString.charAt(pos);\n                return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n            }\n            while(pos < cookiesString.length){\n                start = pos;\n                cookiesSeparatorFound = false;\n                while(skipWhitespace()){\n                    ch = cookiesString.charAt(pos);\n                    if (ch === \",\") {\n                        lastComma = pos;\n                        pos += 1;\n                        skipWhitespace();\n                        nextStart = pos;\n                        while(pos < cookiesString.length && notSpecialChar()){\n                            pos += 1;\n                        }\n                        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                            cookiesSeparatorFound = true;\n                            pos = nextStart;\n                            cookiesStrings.push(cookiesString.substring(start, lastComma));\n                            start = pos;\n                        } else {\n                            pos = lastComma + 1;\n                        }\n                    } else {\n                        pos += 1;\n                    }\n                }\n                if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n                    cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n                }\n            }\n            return cookiesStrings;\n        }\n        module.exports = parse;\n        module.exports.parse = parse;\n        module.exports.parseString = parseString;\n        module.exports.splitCookiesString = splitCookiesString2;\n    }\n});\n// src/Headers.ts\nvar import_set_cookie_parser = __toESM(require_set_cookie());\n// src/utils/normalizeHeaderName.ts\nvar HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&'*+.^_`|~]/i;\nfunction normalizeHeaderName(name) {\n    if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === \"\") {\n        throw new TypeError(\"Invalid character in header field name\");\n    }\n    return name.trim().toLowerCase();\n}\n// src/utils/normalizeHeaderValue.ts\nvar charCodesToRemove = [\n    String.fromCharCode(10),\n    String.fromCharCode(13),\n    String.fromCharCode(9),\n    String.fromCharCode(32)\n];\nvar HEADER_VALUE_REMOVE_REGEXP = new RegExp(`(^[${charCodesToRemove.join(\"\")}]|$[${charCodesToRemove.join(\"\")}])`, \"g\");\nfunction normalizeHeaderValue(value) {\n    const nextValue = value.replace(HEADER_VALUE_REMOVE_REGEXP, \"\");\n    return nextValue;\n}\n// src/utils/isValidHeaderName.ts\nfunction isValidHeaderName(value) {\n    if (typeof value !== \"string\") {\n        return false;\n    }\n    if (value.length === 0) {\n        return false;\n    }\n    for(let i = 0; i < value.length; i++){\n        const character = value.charCodeAt(i);\n        if (character > 127 || !isToken(character)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isToken(value) {\n    return ![\n        127,\n        32,\n        \"(\",\n        \")\",\n        \"<\",\n        \">\",\n        \"@\",\n        \",\",\n        \";\",\n        \":\",\n        \"\\\\\",\n        '\"',\n        \"/\",\n        \"[\",\n        \"]\",\n        \"?\",\n        \"=\",\n        \"{\",\n        \"}\"\n    ].includes(value);\n}\n// src/utils/isValidHeaderValue.ts\nfunction isValidHeaderValue(value) {\n    if (typeof value !== \"string\") {\n        return false;\n    }\n    if (value.trim() !== value) {\n        return false;\n    }\n    for(let i = 0; i < value.length; i++){\n        const character = value.charCodeAt(i);\n        if (// NUL.\n        character === 0 || // HTTP newline bytes.\n        character === 10 || character === 13) {\n            return false;\n        }\n    }\n    return true;\n}\n// src/Headers.ts\nvar NORMALIZED_HEADERS = Symbol(\"normalizedHeaders\");\nvar RAW_HEADER_NAMES = Symbol(\"rawHeaderNames\");\nvar HEADER_VALUE_DELIMITER = \", \";\nvar _a, _b;\nvar Headers = class _Headers {\n    constructor(init){\n        // Normalized header {\"name\":\"a, b\"} storage.\n        this[_a] = {};\n        // Keeps the mapping between the raw header name\n        // and the normalized header name to ease the lookup.\n        this[_b] = /* @__PURE__ */ new Map();\n        if ([\n            \"Headers\",\n            \"HeadersPolyfill\"\n        ].includes(init?.constructor.name) || init instanceof _Headers || typeof globalThis.Headers !== \"undefined\" && init instanceof globalThis.Headers) {\n            const initialHeaders = init;\n            initialHeaders.forEach((value, name)=>{\n                this.append(name, value);\n            }, this);\n        } else if (Array.isArray(init)) {\n            init.forEach(([name, value])=>{\n                this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);\n            });\n        } else if (init) {\n            Object.getOwnPropertyNames(init).forEach((name)=>{\n                const value = init[name];\n                this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);\n            });\n        }\n    }\n    [(_a = NORMALIZED_HEADERS, _b = RAW_HEADER_NAMES, Symbol.iterator)]() {\n        return this.entries();\n    }\n    *keys() {\n        for (const [name] of this.entries()){\n            yield name;\n        }\n    }\n    *values() {\n        for (const [, value] of this.entries()){\n            yield value;\n        }\n    }\n    *entries() {\n        let sortedKeys = Object.keys(this[NORMALIZED_HEADERS]).sort((a, b)=>a.localeCompare(b));\n        for (const name of sortedKeys){\n            if (name === \"set-cookie\") {\n                for (const value of this.getSetCookie()){\n                    yield [\n                        name,\n                        value\n                    ];\n                }\n            } else {\n                yield [\n                    name,\n                    this.get(name)\n                ];\n            }\n        }\n    }\n    /**\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\n   */ has(name) {\n        if (!isValidHeaderName(name)) {\n            throw new TypeError(`Invalid header name \"${name}\"`);\n        }\n        return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name));\n    }\n    /**\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\n   */ get(name) {\n        if (!isValidHeaderName(name)) {\n            throw TypeError(`Invalid header name \"${name}\"`);\n        }\n        return this[NORMALIZED_HEADERS][normalizeHeaderName(name)] ?? null;\n    }\n    /**\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */ set(name, value) {\n        if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n            return;\n        }\n        const normalizedName = normalizeHeaderName(name);\n        const normalizedValue = normalizeHeaderValue(value);\n        this[NORMALIZED_HEADERS][normalizedName] = normalizeHeaderValue(normalizedValue);\n        this[RAW_HEADER_NAMES].set(normalizedName, name);\n    }\n    /**\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */ append(name, value) {\n        if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n            return;\n        }\n        const normalizedName = normalizeHeaderName(name);\n        const normalizedValue = normalizeHeaderValue(value);\n        let resolvedValue = this.has(normalizedName) ? `${this.get(normalizedName)}, ${normalizedValue}` : normalizedValue;\n        this.set(name, resolvedValue);\n    }\n    /**\n   * Deletes a header from the `Headers` object.\n   */ delete(name) {\n        if (!isValidHeaderName(name)) {\n            return;\n        }\n        if (!this.has(name)) {\n            return;\n        }\n        const normalizedName = normalizeHeaderName(name);\n        delete this[NORMALIZED_HEADERS][normalizedName];\n        this[RAW_HEADER_NAMES].delete(normalizedName);\n    }\n    /**\n   * Traverses the `Headers` object,\n   * calling the given callback for each header.\n   */ forEach(callback, thisArg) {\n        for (const [name, value] of this.entries()){\n            callback.call(thisArg, value, name, this);\n        }\n    }\n    /**\n   * Returns an array containing the values\n   * of all Set-Cookie headers associated\n   * with a response\n   */ getSetCookie() {\n        const setCookieHeader = this.get(\"set-cookie\");\n        if (setCookieHeader === null) {\n            return [];\n        }\n        if (setCookieHeader === \"\") {\n            return [\n                \"\"\n            ];\n        }\n        return (0, import_set_cookie_parser.splitCookiesString)(setCookieHeader);\n    }\n};\n// src/getRawHeaders.ts\nfunction getRawHeaders(headers) {\n    const rawHeaders = {};\n    for (const [name, value] of headers.entries()){\n        rawHeaders[headers[RAW_HEADER_NAMES].get(name)] = value;\n    }\n    return rawHeaders;\n}\n// src/transformers/headersToList.ts\nfunction headersToList(headers) {\n    const headersList = [];\n    headers.forEach((value, name)=>{\n        const resolvedValue = value.includes(\",\") ? value.split(\",\").map((value2)=>value2.trim()) : value;\n        headersList.push([\n            name,\n            resolvedValue\n        ]);\n    });\n    return headersList;\n}\n// src/transformers/headersToString.ts\nfunction headersToString(headers) {\n    const list = headersToList(headers);\n    const lines = list.map(([name, value])=>{\n        const values = [].concat(value);\n        return `${name}: ${values.join(\", \")}`;\n    });\n    return lines.join(\"\\r\\n\");\n}\n// src/transformers/headersToObject.ts\nvar singleValueHeaders = [\n    \"user-agent\"\n];\nfunction headersToObject(headers) {\n    const headersObject = {};\n    headers.forEach((value, name)=>{\n        const isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(\",\");\n        headersObject[name] = isMultiValue ? value.split(\",\").map((s)=>s.trim()) : value;\n    });\n    return headersObject;\n}\n// src/transformers/stringToHeaders.ts\nfunction stringToHeaders(str) {\n    const lines = str.trim().split(/[\\r\\n]+/);\n    return lines.reduce((headers, line)=>{\n        if (line.trim() === \"\") {\n            return headers;\n        }\n        const parts = line.split(\": \");\n        const name = parts.shift();\n        const value = parts.join(\": \");\n        headers.append(name, value);\n        return headers;\n    }, new Headers());\n}\n// src/transformers/listToHeaders.ts\nfunction listToHeaders(list) {\n    const headers = new Headers();\n    list.forEach(([name, value])=>{\n        const values = [].concat(value);\n        values.forEach((value2)=>{\n            headers.append(name, value2);\n        });\n    });\n    return headers;\n}\n// src/transformers/reduceHeadersObject.ts\nfunction reduceHeadersObject(headers, reducer, initialState) {\n    return Object.keys(headers).reduce((nextHeaders, name)=>{\n        return reducer(nextHeaders, name, headers[name]);\n    }, initialState);\n}\n// src/transformers/objectToHeaders.ts\nfunction objectToHeaders(headersObject) {\n    return reduceHeadersObject(headersObject, (headers, name, value)=>{\n        const values = [].concat(value).filter(Boolean);\n        values.forEach((value2)=>{\n            headers.append(name, value2);\n        });\n        return headers;\n    }, new Headers());\n}\n// src/transformers/flattenHeadersList.ts\nfunction flattenHeadersList(list) {\n    return list.map(([name, values])=>{\n        return [\n            name,\n            [].concat(values).join(\", \")\n        ];\n    });\n}\n// src/transformers/flattenHeadersObject.ts\nfunction flattenHeadersObject(headersObject) {\n    return reduceHeadersObject(headersObject, (headers, name, value)=>{\n        headers[name] = [].concat(value).join(\", \");\n        return headers;\n    }, {});\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/headers-polyfill/lib/index.mjs\n");

/***/ })

};
;